using System.CodeDom.Compiler;

namespace UnambitiousFx.Core.CodeGen.Design;

/// <summary>
/// Manages writing multiple arities to a single file with region separators.
/// </summary>
internal sealed class RegionFileWriter
{
    private readonly string _namespace;
    private readonly bool _useNullable;
    private readonly List<RegionContent> _regions;
    private readonly HashSet<string> _usings;

    public RegionFileWriter(string @namespace, bool useNullable = true)
    {
        _namespace = @namespace;
        _useNullable = useNullable;
        _regions = new List<RegionContent>();
        _usings = new HashSet<string>();
    }

    /// <summary>
    /// Adds a region with the specified arity and content.
    /// </summary>
    public void AddRegion(ushort arity, IEnumerable<ITypeDefinitionWriter> typeWriters)
    {
        _regions.Add(new RegionContent(arity, typeWriters.ToList()));

        // Collect usings from all type writers
        foreach (var typeWriter in typeWriters)
        {
            foreach (var @using in typeWriter.Usings)
            {
                _usings.Add(@using);
            }
        }
    }

    /// <summary>
    /// Writes all regions to the provided writer.
    /// </summary>
    public void Write(IndentedTextWriter writer)
    {
        WriteHeader(writer);

        if (_useNullable)
        {
            writer.WriteLine("#nullable enable");
            writer.WriteLine();
        }

        // Write all unique usings
        foreach (var @using in _usings.Order())
        {
            writer.WriteLine($"using {@using};");
        }

        writer.WriteLine();
        writer.WriteLine($"namespace {_namespace};");
        writer.WriteLine();

        // Write each region
        for (int i = 0; i < _regions.Count; i++)
        {
            var region = _regions[i];

            writer.WriteLine($"#region Arity {region.Arity}");
            writer.WriteLine();

            foreach (var typeWriter in region.TypeWriters)
            {
                typeWriter.Write(writer);
            }

            writer.WriteLine($"#endregion // Arity {region.Arity}");

            // Add blank line between regions, but not after the last one
            if (i < _regions.Count - 1)
            {
                writer.WriteLine();
            }
        }
    }

    private static void WriteHeader(IndentedTextWriter writer)
    {
        writer.WriteLine("// <auto-generated>");
        writer.WriteLine("//     This code was generated by UnambitiousFx.Core.CodeGen.");
        writer.WriteLine("//");
        writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
        writer.WriteLine("//     the code is regenerated.");
        writer.WriteLine("// </auto-generated>");
        writer.WriteLine();
    }

    private record RegionContent(ushort Arity, List<ITypeDefinitionWriter> TypeWriters);
}
