// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ValueAccess.ValueTasks;

public static partial class ResultValueOrThrowExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<TValue1> ValueOrThrowAsync<TValue1>(this ValueTask<Result<TValue1>> resultTask) where TValue1 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow();
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<TValue1> ValueOrThrowAsync<TValue1>(this ValueTask<Result<TValue1>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2)> ValueOrThrowAsync<TValue1, TValue2>(this ValueTask<Result<TValue1, TValue2>> resultTask) where TValue1 : notnull where TValue2 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2)> ValueOrThrowAsync<TValue1, TValue2>(this ValueTask<Result<TValue1, TValue2>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3)> ValueOrThrowAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<TValue1, TValue2, TValue3>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3)> ValueOrThrowAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<TValue1, TValue2, TValue3>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async ValueOrThrow throwing aggregated exception when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> resultTask) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(errors => throw errors.ToException());
    }
    
    /// <summary>
    /// Async ValueOrThrow using exception factory when failure.
    /// </summary>
    public static async ValueTask<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)> ValueOrThrowAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> resultTask, Func<IEnumerable<IError>, Exception> exceptionFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await resultTask.ConfigureAwait(false);
        return result.ValueOrThrow(exceptionFactory);
    }
    
    #endregion // Arity 8
}
