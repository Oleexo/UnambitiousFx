// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable


namespace UnambitiousFx.Core.Results.Extensions.ValueAccess;

public static partial class ResultToNullableExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Returns the value as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static TValue1? ToNullable<TValue1>(this Result<TValue1> result) where TValue1 : notnull {
        return result.TryGet(out var value)
                   ? (TValue1?)value
                   : default;
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2)? ToNullable<TValue1, TValue2>(this Result<TValue1, TValue2> result) where TValue1 : notnull where TValue2 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2)
                   ? (value1, value2)
                   : default;
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3)? ToNullable<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3)
                   ? (value1, value2, value3)
                   : default;
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3, TValue4)? ToNullable<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3, out var value4)
                   ? (value1, value2, value3, value4)
                   : default;
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5)? ToNullable<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5)
                   ? (value1, value2, value3, value4, value5)
                   : default;
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)? ToNullable<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6)
                   ? (value1, value2, value3, value4, value5, value6)
                   : default;
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)? ToNullable<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7)
                   ? (value1, value2, value3, value4, value5, value6, value7)
                   : default;
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Returns the tuple of values as nullable if success; otherwise default.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <returns>The nullable value or null/default.</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)? ToNullable<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (!result.IsSuccess) {
            return null;
        }
        return result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7, out var value8)
                   ? (value1, value2, value3, value4, value5, value6, value7, value8)
                   : default;
    }
    
    #endregion // Arity 8
}
