// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;

namespace UnambitiousFx.Core.Results.Extensions.ValueAccess;

public static partial class ResultValueOrExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static TValue1 ValueOr<TValue1>(this Result<TValue1> result, TValue1 fallback1) where TValue1 : notnull {
        return result.Match<TValue1>(value1 => value1, _ => fallback1);
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static TValue1 ValueOr<TValue1>(this Result<TValue1> result, Func<TValue1> fallbackFactory) where TValue1 : notnull {
        return result.Match<TValue1>(value1 => value1, _ => fallbackFactory());
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2) ValueOr<TValue1, TValue2>(this Result<TValue1, TValue2> result, TValue1 fallback1, TValue2 fallback2) where TValue1 : notnull where TValue2 : notnull {
        return result.Match<(TValue1, TValue2)>((value1, value2) => (value1, value2), _ => (fallback1, fallback2));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2) ValueOr<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<(TValue1, TValue2)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull {
        return result.Match<(TValue1, TValue2)>((value1, value2) => (value1, value2), _ => fallbackFactory());
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3) ValueOr<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Match<(TValue1, TValue2, TValue3)>((value1, value2, value3) => (value1, value2, value3), _ => (fallback1, fallback2, fallback3));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3) ValueOr<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<(TValue1, TValue2, TValue3)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Match<(TValue1, TValue2, TValue3)>((value1, value2, value3) => (value1, value2, value3), _ => fallbackFactory());
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <param name="fallback4">Fallback value 4.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4) ValueOr<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4)>((value1, value2, value3, value4) => (value1, value2, value3, value4), _ => (fallback1, fallback2, fallback3, fallback4));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4) ValueOr<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<(TValue1, TValue2, TValue3, TValue4)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4)>((value1, value2, value3, value4) => (value1, value2, value3, value4), _ => fallbackFactory());
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <param name="fallback4">Fallback value 4.</param>
    /// <param name="fallback5">Fallback value 5.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5)>((value1, value2, value3, value4, value5) => (value1, value2, value3, value4, value5), _ => (fallback1, fallback2, fallback3, fallback4, fallback5));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<(TValue1, TValue2, TValue3, TValue4, TValue5)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5)>((value1, value2, value3, value4, value5) => (value1, value2, value3, value4, value5), _ => fallbackFactory());
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <param name="fallback4">Fallback value 4.</param>
    /// <param name="fallback5">Fallback value 5.</param>
    /// <param name="fallback6">Fallback value 6.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)>((value1, value2, value3, value4, value5, value6) => (value1, value2, value3, value4, value5, value6), _ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)>((value1, value2, value3, value4, value5, value6) => (value1, value2, value3, value4, value5, value6), _ => fallbackFactory());
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <param name="fallback4">Fallback value 4.</param>
    /// <param name="fallback5">Fallback value 5.</param>
    /// <param name="fallback6">Fallback value 6.</param>
    /// <param name="fallback7">Fallback value 7.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6, TValue7 fallback7) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)>((value1, value2, value3, value4, value5, value6, value7) => (value1, value2, value3, value4, value5, value6, value7), _ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6, fallback7));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)>((value1, value2, value3, value4, value5, value6, value7) => (value1, value2, value3, value4, value5, value6, value7), _ => fallbackFactory());
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Returns contained values when successful; otherwise provided fallback(s).
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallback1">Fallback value 1.</param>
    /// <param name="fallback2">Fallback value 2.</param>
    /// <param name="fallback3">Fallback value 3.</param>
    /// <param name="fallback4">Fallback value 4.</param>
    /// <param name="fallback5">Fallback value 5.</param>
    /// <param name="fallback6">Fallback value 6.</param>
    /// <param name="fallback7">Fallback value 7.</param>
    /// <param name="fallback8">Fallback value 8.</param>
    /// <returns>The value(s) or fallback(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6, TValue7 fallback7, TValue8 fallback8) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)>((value1, value2, value3, value4, value5, value6, value7, value8) => (value1, value2, value3, value4, value5, value6, value7, value8), _ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6, fallback7, fallback8));
    }
    
    /// <summary>
    /// Returns contained values when successful; otherwise value(s) from factory.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="fallbackFactory">Factory producing fallback value(s).</param>
    /// <returns>The value(s) or factory value(s).</returns>
    public static (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8) ValueOr<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)> fallbackFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Match<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)>((value1, value2, value3, value4, value5, value6, value7, value8) => (value1, value2, value3, value4, value5, value6, value7, value8), _ => fallbackFactory());
    }
    
    #endregion // Arity 8
}
