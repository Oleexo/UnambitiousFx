// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.SideEffects.Tasks;

public static partial class ResultTapBothExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapBothAsync(this Result result, Func<Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) {
        if (result.IsSuccess) {
            await onSuccess();
        }
        else {
            await onFailure(result.Errors);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapBothAsync(this Task<Result> awaitableResult, Action onSuccess, Action<IEnumerable<IError>> onFailure) {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapBothAsync(this Task<Result> awaitableResult, Func<Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapBothAsync<TValue1>(this Result<TValue1> result, Func<TValue1, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull {
        if (result.TryGet(out var value1, out var err)) {
            await onSuccess(value1);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapBothAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Action<TValue1> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapBothAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Func<TValue1, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapBothAsync<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull {
        if (result.TryGet(out var value1, out var value2, out var err)) {
            await onSuccess(value1, value2);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapBothAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Action<TValue1, TValue2> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapBothAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Func<TValue1, TValue2, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapBothAsync<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var err)) {
            await onSuccess(value1, value2, value3);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapBothAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Action<TValue1, TValue2, TValue3> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapBothAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<TValue1, TValue2, TValue3, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapBothAsync<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var err)) {
            await onSuccess(value1, value2, value3, value4);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapBothAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapBothAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var err)) {
            await onSuccess(value1, value2, value3, value4, value5);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var err)) {
            await onSuccess(value1, value2, value3, value4, value5, value6);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7, out var err)) {
            await onSuccess(value1, value2, value3, value4, value5, value6, value7);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async TapBoth executing different side effects with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7, out var value8, out var err)) {
            await onSuccess(value1, value2, value3, value4, value5, value6, value7, value8);
        }
        else {
            await onFailure(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with sync actions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    /// <summary>
    /// Async TapBoth executing different side effects on an awaitable result with async functions.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="onSuccess">Async function to execute on success.</param>
    /// <param name="onFailure">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapBothAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task> onSuccess, Func<IEnumerable<IError>, Task> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return await result.TapBothAsync(onSuccess, onFailure);
    }
    
    #endregion // Arity 8
}
