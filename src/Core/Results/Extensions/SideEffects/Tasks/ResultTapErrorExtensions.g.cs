// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.SideEffects.Tasks;

public static partial class ResultTapErrorExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapErrorAsync(this Result result, Func<IEnumerable<IError>, Task> tap) {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapErrorAsync(this Task<Result> awaitableResult, Action<IEnumerable<IError>> tap) {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result> TapErrorAsync(this Task<Result> awaitableResult, Func<IEnumerable<IError>, Task> tap) {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapErrorAsync<TValue1>(this Result<TValue1> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapErrorAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1>> TapErrorAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapErrorAsync<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapErrorAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2>> TapErrorAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapErrorAsync<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapErrorAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> TapErrorAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async TapError executing a side effect on failure with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (!result.TryGet(out IEnumerable<IError>? err)) {
            await tap(err);
        }
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Action<IEnumerable<IError>> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        result.IfFailure(tap);
        return result;
    }
    
    /// <summary>
    /// Async TapError executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on failure.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<IEnumerable<IError>, Task> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return await result.TapErrorAsync(tap);
    }
    
    #endregion // Arity 8
}
