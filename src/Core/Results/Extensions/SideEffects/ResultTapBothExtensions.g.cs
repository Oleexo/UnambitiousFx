// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.SideEffects;

public static partial class ResultTapBothExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result TapBoth(this Result result, Action onSuccess, Action<IEnumerable<IError>> onFailure) {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1> TapBoth<TValue1>(this Result<TValue1> result, Action<TValue1> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2> TapBoth<TValue1, TValue2>(this Result<TValue1, TValue2> result, Action<TValue1, TValue2> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3> TapBoth<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Action<TValue1, TValue2, TValue3> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4> TapBoth<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Action<TValue1, TValue2, TValue3, TValue4> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5> TapBoth<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Action<TValue1, TValue2, TValue3, TValue4, TValue5> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> TapBoth<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> TapBoth<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Executes different side effects based on success or failure, then returns the original result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="onSuccess">Action to execute on success.</param>
    /// <param name="onFailure">Action to execute on failure.</param>
    /// <returns>The original result unchanged.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> TapBoth<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> onSuccess, Action<IEnumerable<IError>> onFailure) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        result.Match(onSuccess, onFailure);
        return result;
    }
    
    #endregion // Arity 8
}
