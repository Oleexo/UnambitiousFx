// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;

namespace UnambitiousFx.Core.Results.Extensions.SideEffects.ValueTasks;

public static partial class ResultTapExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result> TapAsync(this Result result, Func<ValueTask> tap) {
        if (result.IsSuccess) {
            await tap();
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result> TapAsync(this ValueTask<Result> awaitableResult, Action tap) {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result> TapAsync(this ValueTask<Result> awaitableResult, Func<ValueTask> tap) {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1>> TapAsync<TValue1>(this Result<TValue1> result, Func<TValue1, ValueTask> tap) where TValue1 : notnull {
        if (result.TryGet(out var value1)) {
            await tap(value1);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1>> TapAsync<TValue1>(this ValueTask<Result<TValue1>> awaitableResult, Action<TValue1> tap) where TValue1 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1>> TapAsync<TValue1>(this ValueTask<Result<TValue1>> awaitableResult, Func<TValue1, ValueTask> tap) where TValue1 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2>> TapAsync<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull {
        if (result.TryGet(out var value1, out var value2)) {
            await tap(value1, value2);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2>> TapAsync<TValue1, TValue2>(this ValueTask<Result<TValue1, TValue2>> awaitableResult, Action<TValue1, TValue2> tap) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2>> TapAsync<TValue1, TValue2>(this ValueTask<Result<TValue1, TValue2>> awaitableResult, Func<TValue1, TValue2, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3>> TapAsync<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3)) {
            await tap(value1, value2, value3);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3>> TapAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<TValue1, TValue2, TValue3>> awaitableResult, Action<TValue1, TValue2, TValue3> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3>> TapAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<TValue1, TValue2, TValue3, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> TapAsync<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4)) {
            await tap(value1, value2, value3, value4);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> TapAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> TapAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5)) {
            await tap(value1, value2, value3, value4, value5);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6)) {
            await tap(value1, value2, value3, value4, value5, value6);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7)) {
            await tap(value1, value2, value3, value4, value5, value6, value7);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async Tap executing a side effect on success with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (result.TryGet(out var value1, out var value2, out var value3, out var value4, out var value5, out var value6, out var value7, out var value8)) {
            await tap(value1, value2, value3, value4, value5, value6, value7, value8);
        }
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with sync action.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Action to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Action<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        result.IfSuccess(tap);
        return result;
    }
    
    /// <summary>
    /// Async Tap executing a side effect on an awaitable result with async function.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="tap">Async function to execute on success.</param>
    /// <returns>A task with the original result unchanged.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> TapAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, ValueTask> tap) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return await result.TapAsync(tap);
    }
    
    #endregion // Arity 8
}
