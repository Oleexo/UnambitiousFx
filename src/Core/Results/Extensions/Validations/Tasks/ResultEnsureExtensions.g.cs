// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Extensions.Transformations.Tasks;

namespace UnambitiousFx.Core.Results.Extensions.Validations.Tasks;

public static partial class ResultExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1>> EnsureAsync<TValue1>(this Result<TValue1> result, Func<TValue1, Task<bool>> predicate, Func<TValue1, Task<Exception>> errorFactory) where TValue1 : notnull {
        return result.ThenAsync(async value => {
            if (await predicate(value)) {
                return Result.Success(value);
            }
            var ex = await errorFactory(value);
            return Result.Failure<TValue1>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1>> EnsureAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Func<TValue1, Task<bool>> predicate, Func<TValue1, Task<Exception>> errorFactory) where TValue1 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2>> EnsureAsync<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Task<bool>> predicate, Func<TValue1, TValue2, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull {
        return result.ThenAsync(async (value1, value2) => {
            if (await predicate(value1, value2)) {
                return Result.Success(value1, value2);
            }
            var ex = await errorFactory(value1, value2);
            return Result.Failure<TValue1, TValue2>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2>> EnsureAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Func<TValue1, TValue2, Task<bool>> predicate, Func<TValue1, TValue2, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3>> EnsureAsync<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.ThenAsync(async (value1, value2, value3) => {
            if (await predicate(value1, value2, value3)) {
                return Result.Success(value1, value2, value3);
            }
            var ex = await errorFactory(value1, value2, value3);
            return Result.Failure<TValue1, TValue2, TValue3>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> EnsureAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<TValue1, TValue2, TValue3, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3, TValue4>> EnsureAsync<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.ThenAsync(async (value1, value2, value3, value4) => {
            if (await predicate(value1, value2, value3, value4)) {
                return Result.Success(value1, value2, value3, value4);
            }
            var ex = await errorFactory(value1, value2, value3, value4);
            return Result.Failure<TValue1, TValue2, TValue3, TValue4>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> EnsureAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.ThenAsync(async (value1, value2, value3, value4, value5) => {
            if (await predicate(value1, value2, value3, value4, value5)) {
                return Result.Success(value1, value2, value3, value4, value5);
            }
            var ex = await errorFactory(value1, value2, value3, value4, value5);
            return Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.ThenAsync(async (value1, value2, value3, value4, value5, value6) => {
            if (await predicate(value1, value2, value3, value4, value5, value6)) {
                return Result.Success(value1, value2, value3, value4, value5, value6);
            }
            var ex = await errorFactory(value1, value2, value3, value4, value5, value6);
            return Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.ThenAsync(async (value1, value2, value3, value4, value5, value6, value7) => {
            if (await predicate(value1, value2, value3, value4, value5, value6, value7)) {
                return Result.Success(value1, value2, value3, value4, value5, value6, value7);
            }
            var ex = await errorFactory(value1, value2, value3, value4, value5, value6, value7);
            return Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Validates the result values asynchronously with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.ThenAsync(async (value1, value2, value3, value4, value5, value6, value7, value8) => {
            if (await predicate(value1, value2, value3, value4, value5, value6, value7, value8)) {
                return Result.Success(value1, value2, value3, value4, value5, value6, value7, value8);
            }
            var ex = await errorFactory(value1, value2, value3, value4, value5, value6, value7, value8);
            return Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(ex);
        });
    }
    
    /// <summary>
    /// Validates the awaitable result values asynchronously with a predicate.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The Task of result to await.</param>
    /// <param name="predicate">The async validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>A Task representing the async operation with the result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> EnsureAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task<bool>> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task<Exception>> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return await result.EnsureAsync(predicate, errorFactory);
    }
    
    #endregion // Arity 8
}
