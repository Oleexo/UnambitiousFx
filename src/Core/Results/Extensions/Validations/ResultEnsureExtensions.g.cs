// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Extensions.Transformations;

namespace UnambitiousFx.Core.Results.Extensions.Validations;

public static partial class ResultEnsureExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1> Ensure<TValue1>(this Result<TValue1> result, Func<TValue1, bool> predicate, Func<TValue1, Exception> errorFactory) where TValue1 : notnull {
        return result.Then(value => predicate(value)
                                        ? Result.Success(value)
                                        : Result.Failure<TValue1>(errorFactory(value)));
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2> Ensure<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, bool> predicate, Func<TValue1, TValue2, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull {
        return result.Then((value1, value2) => predicate(value1, value2)
                                        ? Result.Success(value1, value2)
                                        : Result.Failure<TValue1, TValue2>(errorFactory(value1, value2)));
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3> Ensure<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, bool> predicate, Func<TValue1, TValue2, TValue3, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Then((value1, value2, value3) => predicate(value1, value2, value3)
                                        ? Result.Success(value1, value2, value3)
                                        : Result.Failure<TValue1, TValue2, TValue3>(errorFactory(value1, value2, value3)));
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4> Ensure<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, bool> predicate, Func<TValue1, TValue2, TValue3, TValue4, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Then((value1, value2, value3, value4) => predicate(value1, value2, value3, value4)
                                        ? Result.Success(value1, value2, value3, value4)
                                        : Result.Failure<TValue1, TValue2, TValue3, TValue4>(errorFactory(value1, value2, value3, value4)));
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5> Ensure<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, bool> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Then((value1, value2, value3, value4, value5) => predicate(value1, value2, value3, value4, value5)
                                        ? Result.Success(value1, value2, value3, value4, value5)
                                        : Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5>(errorFactory(value1, value2, value3, value4, value5)));
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> Ensure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, bool> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Then((value1, value2, value3, value4, value5, value6) => predicate(value1, value2, value3, value4, value5, value6)
                                        ? Result.Success(value1, value2, value3, value4, value5, value6)
                                        : Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(errorFactory(value1, value2, value3, value4, value5, value6)));
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> Ensure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, bool> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Then((value1, value2, value3, value4, value5, value6, value7) => predicate(value1, value2, value3, value4, value5, value6, value7)
                                        ? Result.Success(value1, value2, value3, value4, value5, value6, value7)
                                        : Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(errorFactory(value1, value2, value3, value4, value5, value6, value7)));
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Validates the result values with a predicate and returns a failure with the provided exception if validation fails.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="predicate">The validation predicate.</param>
    /// <param name="errorFactory">Factory function to create an exception when validation fails.</param>
    /// <returns>The original result if validation succeeds; otherwise a failure result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> Ensure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, bool> predicate, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Exception> errorFactory) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Then((value1, value2, value3, value4, value5, value6, value7, value8) => predicate(value1, value2, value3, value4, value5, value6, value7, value8)
                                        ? Result.Success(value1, value2, value3, value4, value5, value6, value7, value8)
                                        : Result.Failure<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(errorFactory(value1, value2, value3, value4, value5, value6, value7, value8)));
    }
    
    #endregion // Arity 8
}
