// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result ShapeError(this Result result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1> ShapeError<T1>(this Result<T1> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2> ShapeError<T1, T2>(this Result<T1, T2> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3> ShapeError<T1, T2, T3>(this Result<T1, T2, T3> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4> ShapeError<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5> ShapeError<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6> ShapeError<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6, T7> ShapeError<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Transforms the error structure of the result using the specified shaping function.
    /// </summary>
    /// <param name="result">The result to shape errors for.</param>
    /// <param name="shape">The function to transform the error structure.</param>
    /// <returns>A new result with transformed error structure if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6, T7, T8> ShapeError<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, Func<IEnumerable<IError>, IEnumerable<IError>> shape) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        return result.IsSuccess
            ? result
            : ResultExtensions.Preserve(result, result.MapError(shape));
    }
    
    #endregion // Arity 8
}
