// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultMatchErrorExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TOut>(this Result result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TOut>(this Result<TValue1> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TOut>(this Result<TValue1, TValue2> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TOut>(this Result<TValue1, TValue2, TValue3> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TValue4, TOut>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value in the result.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TOut>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value in the result.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value in the result.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value in the result.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value in the result.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value in the result.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Matches the first error of the specified type in the result and executes the corresponding function.
    /// </summary>
    /// <typeparam name="TError">The type of error to match. Must be a class implementing IError.</typeparam>
    /// <typeparam name="TOut">The type of the output value.</typeparam>
    /// <typeparam name="TValue1">The type of the first value in the result.</typeparam>
    /// <typeparam name="TValue2">The type of the second value in the result.</typeparam>
    /// <typeparam name="TValue3">The type of the third value in the result.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value in the result.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value in the result.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value in the result.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value in the result.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value in the result.</typeparam>
    /// <param name="result">The result to match errors for.</param>
    /// <param name="onMatch">The function to execute when a matching error is found.</param>
    /// <param name="onElse">The function to execute when no matching error is found.</param>
    /// <returns>The result of executing either onMatch or onElse function.</returns>
    public static TOut MatchError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TError, TOut> onMatch, Func<TOut> onElse) where TError : class, IError where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        ArgumentNullException.ThrowIfNull(onMatch);
        ArgumentNullException.ThrowIfNull(onElse);
        var match = result.Reasons.OfType<TError>()
                          .FirstOrDefault();
        return match is not null
                   ? onMatch(match)
                   : onElse();
    }
    
    #endregion // Arity 8
}
