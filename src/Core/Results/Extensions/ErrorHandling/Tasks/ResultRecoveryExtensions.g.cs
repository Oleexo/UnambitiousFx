// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling.Tasks;

public static partial class ResultExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1>> RecoverAsync<TValue1>(this Task<Result<TValue1>> awaitableResult, Func<IEnumerable<IError>, Task<TValue1>> recover) where TValue1 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2>> RecoverAsync<TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2)>> recover) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3>> RecoverAsync<TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4>> RecoverAsync<TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3, TValue4)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> RecoverAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3, TValue4, TValue5)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> RecoverAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> RecoverAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6, fallback.Item7);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Asynchronously recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to recover from.</param>
    /// <param name="recover">The async function that takes the errors and returns fallback values.</param>
    /// <returns>A task with a successful result containing the fallback values if the original result failed; otherwise, the original result.</returns>
    public static async Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> RecoverAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<IEnumerable<IError>, Task<(TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)>> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
                        
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = await recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6, fallback.Item7, fallback.Item8);
    }
    
    #endregion // Arity 8
}
