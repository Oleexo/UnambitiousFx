// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling.Tasks;

public static partial class ResultExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError>(this Task<Result> awaitableResult) {
        var result = await awaitableResult;
        return result.HasError<TError>();
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1>(this Task<Result<TValue1>> awaitableResult) where TValue1 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1>();
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2>(this Task<Result<TValue1, TValue2>> awaitableResult) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2>();
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3>(this Task<Result<TValue1, TValue2, TValue3>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3>();
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3, TValue4>(this Task<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3, TValue4>();
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3, TValue4, TValue5>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3, TValue4, TValue5>();
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>();
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>();
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Asynchronously determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to check for errors.</param>
    /// <returns>A task with true if the result contains an error of the specified type; otherwise, false.</returns>
    public static async Task<bool> HasErrorAsync<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Task<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return result.HasError<TError,TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>();
    }
    
    #endregion // Arity 8
}
