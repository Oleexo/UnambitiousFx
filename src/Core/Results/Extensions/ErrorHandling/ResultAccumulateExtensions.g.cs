// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultAccumulateExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result Accumulate(this Result original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) {
        original.TryGet(out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1> Accumulate<T1>(this Result<T1> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull {
        original.TryGet(out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2> Accumulate<T1, T2>(this Result<T1, T2> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull {
        original.TryGet(out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3> Accumulate<T1, T2, T3>(this Result<T1, T2, T3> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull {
        original.TryGet(out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3, T4> Accumulate<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        original.TryGet(out _, out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3, T4>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3, T4, T5> Accumulate<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        original.TryGet(out _, out _, out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3, T4, T5>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3, T4, T5, T6> Accumulate<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        original.TryGet(out _, out _, out _, out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3, T4, T5, T6>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3, T4, T5, T6, T7> Accumulate<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        original.TryGet(out _, out _, out _, out _, out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3, T4, T5, T6, T7>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Accumulates errors by applying a mapping function to existing errors and preserving all reasons and metadata.
    /// </summary>
    /// <param name="original">The original result to accumulate errors from.</param>
    /// <param name="mapError">The function to map and accumulate errors.</param>
    /// <returns>A new result with accumulated errors, preserving all reasons and metadata from the original result.</returns>
    internal static Result<T1, T2, T3, T4, T5, T6, T7, T8> Accumulate<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> original, Func<IEnumerable<IError>, IEnumerable<IError>> mapError) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        original.TryGet(out _, out _, out _, out _, out _, out _, out _, out _, out var existingError);
        var newEx = mapError(existingError!);
        var mapped = Result.Failure<T1, T2, T3, T4, T5, T6, T7, T8>(newEx);
        foreach (var r in original.Reasons) {
            mapped.AddReason(r);
        }
        foreach (var kv in original.Metadata) {
            mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }
    
    #endregion // Arity 8
}
