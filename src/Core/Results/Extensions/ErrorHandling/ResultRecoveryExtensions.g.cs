// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultRecoveryExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1> Recover<TValue1>(this Result<TValue1> result, Func<IEnumerable<IError>, TValue1> recover) where TValue1 : notnull {
        if (result.TryGet(out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1> Recover<TValue1>(this Result<TValue1> result, TValue1 fallback1) where TValue1 : notnull {
        return result.Recover(_ => fallback1);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2> Recover<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<IEnumerable<IError>, (TValue1, TValue2)> recover) where TValue1 : notnull where TValue2 : notnull {
        if (result.TryGet(out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2> Recover<TValue1, TValue2>(this Result<TValue1, TValue2> result, TValue1 fallback1, TValue2 fallback2) where TValue1 : notnull where TValue2 : notnull {
        return result.Recover(_ => (fallback1, fallback2));
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3> Recover<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (result.TryGet(out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3> Recover<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3));
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4> Recover<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3, TValue4)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (result.TryGet(out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <param name="fallback4">The fallback value for the fourth parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4> Recover<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3, fallback4));
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5> Recover<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3, TValue4, TValue5)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (result.TryGet(out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <param name="fallback4">The fallback value for the fourth parameter.</param>
    /// <param name="fallback5">The fallback value for the fifth parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5> Recover<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3, fallback4, fallback5));
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <param name="fallback4">The fallback value for the fourth parameter.</param>
    /// <param name="fallback5">The fallback value for the fifth parameter.</param>
    /// <param name="fallback6">The fallback value for the sixth parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6));
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6, fallback.Item7);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <param name="fallback4">The fallback value for the fourth parameter.</param>
    /// <param name="fallback5">The fallback value for the fifth parameter.</param>
    /// <param name="fallback6">The fallback value for the sixth parameter.</param>
    /// <param name="fallback7">The fallback value for the seventh parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6, TValue7 fallback7) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6, fallback7));
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Recovers from a failed result by providing fallback values through a recovery function.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="recover">A function that takes the errors and returns fallback values.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<IEnumerable<IError>, (TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8)> recover) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (result.TryGet(out _, out _, out _, out _, out _, out _, out _, out _, out var error)) {
            return result;
        }
        var fallback = recover(error);
        return Result.Success(fallback.Item1, fallback.Item2, fallback.Item3, fallback.Item4, fallback.Item5, fallback.Item6, fallback.Item7, fallback.Item8);
    }
    
    /// <summary>
    /// Recovers from a failed result by providing specific fallback values.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="result">The result to recover from.</param>
    /// <param name="fallback1">The fallback value for the first parameter.</param>
    /// <param name="fallback2">The fallback value for the second parameter.</param>
    /// <param name="fallback3">The fallback value for the third parameter.</param>
    /// <param name="fallback4">The fallback value for the fourth parameter.</param>
    /// <param name="fallback5">The fallback value for the fifth parameter.</param>
    /// <param name="fallback6">The fallback value for the sixth parameter.</param>
    /// <param name="fallback7">The fallback value for the seventh parameter.</param>
    /// <param name="fallback8">The fallback value for the eighth parameter.</param>
    /// <returns>A successful result with the fallback values if the original result failed; otherwise, the original result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> Recover<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, TValue1 fallback1, TValue2 fallback2, TValue3 fallback3, TValue4 fallback4, TValue5 fallback5, TValue6 fallback6, TValue7 fallback7, TValue8 fallback8) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Recover(_ => (fallback1, fallback2, fallback3, fallback4, fallback5, fallback6, fallback7, fallback8));
    }
    
    #endregion // Arity 8
}
