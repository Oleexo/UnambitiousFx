// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable


namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultAppendErrorExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result AppendError(this Result result, string suffix) {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1> AppendError<T1>(this Result<T1> result, string suffix) where T1 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2> AppendError<T1, T2>(this Result<T1, T2> result, string suffix) where T1 : notnull where T2 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3> AppendError<T1, T2, T3>(this Result<T1, T2, T3> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4> AppendError<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5> AppendError<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6> AppendError<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6, T7> AppendError<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Appends a suffix to the error message of the first error in the result.
    /// </summary>
    /// <param name="result">The result to append error message to.</param>
    /// <param name="suffix">The suffix to append to the error message.</param>
    /// <returns>A new result with the appended error message if the original result failed, otherwise the original successful result.</returns>
    public static Result<T1, T2, T3, T4, T5, T6, T7, T8> AppendError<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, string suffix) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        ArgumentNullException.ThrowIfNull(result);
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        return result.MapError(errs => errs.Select(x => x.WithMessage(x.Message + suffix)));
    }
    
    #endregion // Arity 8
}
