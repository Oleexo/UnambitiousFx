// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultHasErrorExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError>(this Result result) {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1>(this Result<TValue1> result) where TValue1 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2>(this Result<TValue1, TValue2> result) where TValue1 : notnull where TValue2 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Determines whether the result contains an error of the specified type.
    /// </summary>
    /// <typeparam name="TError">The type of error to check for. Can be an error type or exception type.</typeparam>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="result">The result to check for errors.</param>
    /// <returns>true if the result contains an error of the specified type; otherwise, false.</returns>
    public static bool HasError<TError, TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        if (typeof(Exception).IsAssignableFrom(typeof(TError))) {
            return result.Reasons.OfType<ExceptionalError>()
                         .Any(e => e.Exception is TError);
        }
        return result.Reasons.OfType<TError>()
                     .Any();
    }
    
    #endregion // Arity 8
}
