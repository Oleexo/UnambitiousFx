// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling;

public static partial class ResultFindErrorExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError(this Result result, Func<IError, bool> predicate) {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError(this Result result, Func<IError, bool> predicate, out IError? error) {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1>(this Result<TValue1> result, Func<IError, bool> predicate) where TValue1 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1>(this Result<TValue1> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Locates a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <returns>The first error matching the predicate, or null if no match is found.</returns>
    public static IError? FindError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        return result.Reasons.OfType<IError>()
                     .FirstOrDefault(predicate);
    }
    
    /// <summary>
    /// Attempts to locate a specific attached error reason via predicate.
    /// </summary>
    /// <param name="result">The result to search for errors.</param>
    /// <param name="predicate">The predicate function to match errors.</param>
    /// <param name="error">When this method returns, contains the first error matching the predicate, or null if no match is found.</param>
    /// <returns>true if an error matching the predicate was found; otherwise, false.</returns>
    public static bool TryPickError<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<IError, bool> predicate, out IError? error) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        ArgumentNullException.ThrowIfNull(predicate);
        error = result.Reasons.OfType<IError>()
                      .FirstOrDefault(predicate);
        return error is not null;
    }
    
    #endregion // Arity 8
}
