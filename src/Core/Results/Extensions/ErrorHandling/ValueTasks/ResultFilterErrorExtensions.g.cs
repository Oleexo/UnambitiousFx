// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results.Extensions.ErrorHandling.ValueTasks;

public static partial class ResultExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result> FilterErrorAsync(this ValueTask<Result> awaitableResult, Func<IError, bool> predicate) {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1>> FilterErrorAsync<TValue1>(this ValueTask<Result<TValue1>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2>> FilterErrorAsync<TValue1, TValue2>(this ValueTask<Result<TValue1, TValue2>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3>> FilterErrorAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> FilterErrorAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> FilterErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> FilterErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> FilterErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Asynchronously filters errors from the result based on the specified predicate.
    /// </summary>
    /// <typeparam name="TValue1">The type of the first value.</typeparam>
    /// <typeparam name="TValue2">The type of the second value.</typeparam>
    /// <typeparam name="TValue3">The type of the third value.</typeparam>
    /// <typeparam name="TValue4">The type of the fourth value.</typeparam>
    /// <typeparam name="TValue5">The type of the fifth value.</typeparam>
    /// <typeparam name="TValue6">The type of the sixth value.</typeparam>
    /// <typeparam name="TValue7">The type of the seventh value.</typeparam>
    /// <typeparam name="TValue8">The type of the eighth value.</typeparam>
    /// <param name="awaitableResult">The awaitable result to filter errors from.</param>
    /// <param name="predicate">The async predicate to determine which errors to keep.</param>
    /// <returns>A task with a result containing only the errors that match the predicate. If no errors match, returns a success result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> FilterErrorAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<IError, bool> predicate) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var result = await awaitableResult;
        return result.FilterError(predicate);
    }
    
    #endregion // Arity 8
}
