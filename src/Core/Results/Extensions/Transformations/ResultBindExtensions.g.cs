// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable


namespace UnambitiousFx.Core.Results.Extensions.Transformations;

public static partial class ResultBindExtensions
{
    #region Arity 0
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind(this Result result, Func<Result> bind, bool copyReasonsAndMetadata = true) {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TOut1>(this Result result, Func<Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TOut1, TOut2>(this Result result, Func<Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TOut1, TOut2, TOut3>(this Result result, Func<Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TOut1, TOut2, TOut3, TOut4>(this Result result, Func<Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TOut1, TOut2, TOut3, TOut4, TOut5>(this Result result, Func<Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result result, Func<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result result, Func<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result result, Func<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match(() => {
                    var response = bind();
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 0
    
    #region Arity 1
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1>(this Result<TValue1> result, Func<TValue1, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TOut1>(this Result<TValue1> result, Func<TValue1, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TOut1, TOut2>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TOut1, TOut2, TOut3>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1> result, Func<TValue1, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match(v => {
                    var response = bind(v);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TOut1>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TOut1, TOut2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2) => {
                    var response = bind(v1, v2);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TOut1>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3) => {
                    var response = bind(v1, v2, v3);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3, TValue4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TValue4, TOut1>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3, v4) => {
                    var response = bind(v1, v2, v3, v4);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3, v4, v5) => {
                    var response = bind(v1, v2, v3, v4, v5);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6) => {
                    var response = bind(v1, v2, v3, v4, v5, v6);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3, TOut4>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3, TOut4, TOut5>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    /// <summary>
    /// Chains a function that returns a Result, propagating failures.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="bind">The function to execute if the result is successful.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>The result from the bind function, or a failure result.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Bind<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> bind, bool copyReasonsAndMetadata = true) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Match((v1, v2, v3, v4, v5, v6, v7, v8) => {
                    var response = bind(v1, v2, v3, v4, v5, v6, v7, v8);
                    if (copyReasonsAndMetadata) {
                        result.CopyReasonsAndMetadata(response);
                    }
                    return response;
                }, err => {
            var response = Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(err);
            if (copyReasonsAndMetadata) {
                result.CopyReasonsAndMetadata(response);
            }
            return response;
        });
    }
    
    #endregion // Arity 8
}
