// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Extensions.Transformations;

namespace UnambitiousFx.Core.Results.Extensions.Transformations.ValueTasks;

public static partial class ResultTryExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1>> TryAsync<TValue1, TOut1>(this ValueTask<Result<TValue1>> awaitableResult, Func<TValue1, TOut1> func) where TValue1 : notnull where TOut1 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1>> TryAsync<TValue1, TOut1>(this ValueTask<Result<TValue1>> awaitableResult, Func<TValue1, ValueTask<TOut1>> func) where TValue1 : notnull where TOut1 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2>> TryAsync<TValue1, TValue2, TOut1, TOut2>(this ValueTask<Result<TValue1, TValue2>> awaitableResult, Func<TValue1, TValue2, (TOut1, TOut2)> func) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2>> TryAsync<TValue1, TValue2, TOut1, TOut2>(this ValueTask<Result<TValue1, TValue2>> awaitableResult, Func<TValue1, TValue2, ValueTask<(TOut1, TOut2)>> func) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3>> TryAsync<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this ValueTask<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<TValue1, TValue2, TValue3, (TOut1, TOut2, TOut3)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3>> TryAsync<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this ValueTask<Result<TValue1, TValue2, TValue3>> awaitableResult, Func<TValue1, TValue2, TValue3, ValueTask<(TOut1, TOut2, TOut3)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4>> TryAsync<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, (TOut1, TOut2, TOut3, TOut4)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4>> TryAsync<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, ValueTask<(TOut1, TOut2, TOut3, TOut4)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, (TOut1, TOut2, TOut3, TOut4, TOut5)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async Try awaiting result then executing a sync function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Try(func);
    }
    
    /// <summary>
    /// Async Try awaiting result then executing an async function with exception handling.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> awaitableResult, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.TryAsync(func).ConfigureAwait(false);
    }
    
    #endregion // Arity 8
}
