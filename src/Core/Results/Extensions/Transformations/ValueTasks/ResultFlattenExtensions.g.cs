// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Extensions.Transformations;

namespace UnambitiousFx.Core.Results.Extensions.Transformations.ValueTasks;

public static partial class ResultFlattenExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1>> FlattenAsync<TValue1>(this ValueTask<Result<Result<TValue1>>> awaitable) where TValue1 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2>> FlattenAsync<TValue1, TValue2>(this ValueTask<Result<Result<TValue1, TValue2>>> awaitable) where TValue1 : notnull where TValue2 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3>> FlattenAsync<TValue1, TValue2, TValue3>(this ValueTask<Result<Result<TValue1, TValue2, TValue3>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4>> FlattenAsync<TValue1, TValue2, TValue3, TValue4>(this ValueTask<Result<Result<TValue1, TValue2, TValue3, TValue4>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> FlattenAsync<TValue1, TValue2, TValue3, TValue4, TValue5>(this ValueTask<Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> FlattenAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this ValueTask<Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> FlattenAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this ValueTask<Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async Flatten unwrapping a nested awaitable Result.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="awaitable">The awaitable nested result instance.</param>
    /// <returns>A task with the flattened result.</returns>
    public static async ValueTask<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> FlattenAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this ValueTask<Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>>> awaitable) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        var outer = await awaitable;
        return outer.Flatten();
    }
    
    #endregion // Arity 8
}
