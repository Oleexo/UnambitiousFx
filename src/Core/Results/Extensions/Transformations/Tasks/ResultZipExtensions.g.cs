// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Extensions.Transformations;

namespace UnambitiousFx.Core.Results.Extensions.Transformations.Tasks;

public static partial class ResultZipExtensions
{
    #region Arity 2
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2>> ZipAsync<T1, T2>(this Task<Result<T1>> r1, Task<Result<T2>> r2) where T1 : notnull where T2 : notnull {
        var (result1, result2) = await (r1, r2);
        return result1.Zip(
            result2);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Func<T1, T2, TR> projector) where T1 : notnull where T2 : notnull where TR : notnull {
        var (result1, result2) = await (r1, r2);
        return result1.Zip(
            result2,
            projector);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3>> ZipAsync<T1, T2, T3>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3) where T1 : notnull where T2 : notnull where T3 : notnull {
        var (result1, result2, result3) = await (r1, r2, r3);
        return result1.Zip(
            result2,
                result3);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Func<T1, T2, T3, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where TR : notnull {
        var (result1, result2, result3) = await (r1, r2, r3);
        return result1.Zip(
            result2,
                result3,
            projector);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3, T4>> ZipAsync<T1, T2, T3, T4>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        var (result1, result2, result3, result4) = await (r1, r2, r3, r4);
        return result1.Zip(
            result2,
                result3,
                result4);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, T4, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Func<T1, T2, T3, T4, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where TR : notnull {
        var (result1, result2, result3, result4) = await (r1, r2, r3, r4);
        return result1.Zip(
            result2,
                result3,
                result4,
            projector);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5>> ZipAsync<T1, T2, T3, T4, T5>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        var (result1, result2, result3, result4, result5) = await (r1, r2, r3, r4, r5);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, T4, T5, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Func<T1, T2, T3, T4, T5, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where TR : notnull {
        var (result1, result2, result3, result4, result5) = await (r1, r2, r3, r4, r5);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
            projector);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6>> ZipAsync<T1, T2, T3, T4, T5, T6>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        var (result1, result2, result3, result4, result5, result6) = await (r1, r2, r3, r4, r5, r6);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, T4, T5, T6, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6, Func<T1, T2, T3, T4, T5, T6, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where TR : notnull {
        var (result1, result2, result3, result4, result5, result6) = await (r1, r2, r3, r4, r5, r6);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6,
            projector);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <param name="r7">Awaitable result 7 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7>> ZipAsync<T1, T2, T3, T4, T5, T6, T7>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6, Task<Result<T7>> r7) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        var (result1, result2, result3, result4, result5, result6, result7) = await (r1, r2, r3, r4, r5, r6, r7);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6,
                result7);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <param name="r7">Awaitable result 7 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, T4, T5, T6, T7, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6, Task<Result<T7>> r7, Func<T1, T2, T3, T4, T5, T6, T7, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where TR : notnull {
        var (result1, result2, result3, result4, result5, result6, result7) = await (r1, r2, r3, r4, r5, r6, r7);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6,
                result7,
            projector);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <typeparam name="T8">Value type 8.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <param name="r7">Awaitable result 7 to combine.</param>
    /// <param name="r8">Awaitable result 8 to combine.</param>
    /// <returns>A task with the combined result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>> ZipAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6, Task<Result<T7>> r7, Task<Result<T8>> r8) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        var (result1, result2, result3, result4, result5, result6, result7, result8) = await (r1, r2, r3, r4, r5, r6, r7, r8);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6,
                result7,
                result8);
    }
    
    /// <summary>
    /// Async Zip combining multiple awaitable Result instances with projection.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <typeparam name="T8">Value type 8.</typeparam>
    /// <typeparam name="TR">Projected result type.</typeparam>
    /// <param name="r1">Awaitable result 1 to combine.</param>
    /// <param name="r2">Awaitable result 2 to combine.</param>
    /// <param name="r3">Awaitable result 3 to combine.</param>
    /// <param name="r4">Awaitable result 4 to combine.</param>
    /// <param name="r5">Awaitable result 5 to combine.</param>
    /// <param name="r6">Awaitable result 6 to combine.</param>
    /// <param name="r7">Awaitable result 7 to combine.</param>
    /// <param name="r8">Awaitable result 8 to combine.</param>
    /// <param name="projector">Function to project the combined values.</param>
    /// <returns>A task with the projected result.</returns>
    public static async Task<Result<TR>> ZipAsync<T1, T2, T3, T4, T5, T6, T7, T8, TR>(this Task<Result<T1>> r1, Task<Result<T2>> r2, Task<Result<T3>> r3, Task<Result<T4>> r4, Task<Result<T5>> r5, Task<Result<T6>> r6, Task<Result<T7>> r7, Task<Result<T8>> r8, Func<T1, T2, T3, T4, T5, T6, T7, T8, TR> projector) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull where TR : notnull {
        var (result1, result2, result3, result4, result5, result6, result7, result8) = await (r1, r2, r3, r4, r5, r6, r7, r8);
        return result1.Zip(
            result2,
                result3,
                result4,
                result5,
                result6,
                result7,
                result8,
            projector);
    }
    
    #endregion // Arity 8
}
