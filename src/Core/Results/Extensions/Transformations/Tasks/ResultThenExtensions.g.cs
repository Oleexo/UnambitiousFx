// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;
using UnambitiousFx.Core.Results.Extensions.Transformations;

namespace UnambitiousFx.Core.Results.Extensions.Transformations.Tasks;

public static partial class ResultThenExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1>> ThenAsync<T1>(this Task<Result<T1>> awaitableResult, Func<T1, Result<T1>> then, bool copyReasonsAndMetadata = true) where T1 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1>> ThenAsync<T1>(this Task<Result<T1>> awaitableResult, Func<T1, Task<Result<T1>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2>> ThenAsync<T1, T2>(this Task<Result<T1, T2>> awaitableResult, Func<T1, T2, Result<T1, T2>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2>> ThenAsync<T1, T2>(this Task<Result<T1, T2>> awaitableResult, Func<T1, T2, Task<Result<T1, T2>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3>> ThenAsync<T1, T2, T3>(this Task<Result<T1, T2, T3>> awaitableResult, Func<T1, T2, T3, Result<T1, T2, T3>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3>> ThenAsync<T1, T2, T3>(this Task<Result<T1, T2, T3>> awaitableResult, Func<T1, T2, T3, Task<Result<T1, T2, T3>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4>> ThenAsync<T1, T2, T3, T4>(this Task<Result<T1, T2, T3, T4>> awaitableResult, Func<T1, T2, T3, T4, Result<T1, T2, T3, T4>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4>> ThenAsync<T1, T2, T3, T4>(this Task<Result<T1, T2, T3, T4>> awaitableResult, Func<T1, T2, T3, T4, Task<Result<T1, T2, T3, T4>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5>> ThenAsync<T1, T2, T3, T4, T5>(this Task<Result<T1, T2, T3, T4, T5>> awaitableResult, Func<T1, T2, T3, T4, T5, Result<T1, T2, T3, T4, T5>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5>> ThenAsync<T1, T2, T3, T4, T5>(this Task<Result<T1, T2, T3, T4, T5>> awaitableResult, Func<T1, T2, T3, T4, T5, Task<Result<T1, T2, T3, T4, T5>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6>> ThenAsync<T1, T2, T3, T4, T5, T6>(this Task<Result<T1, T2, T3, T4, T5, T6>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, Result<T1, T2, T3, T4, T5, T6>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6>> ThenAsync<T1, T2, T3, T4, T5, T6>(this Task<Result<T1, T2, T3, T4, T5, T6>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, Task<Result<T1, T2, T3, T4, T5, T6>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7>> ThenAsync<T1, T2, T3, T4, T5, T6, T7>(this Task<Result<T1, T2, T3, T4, T5, T6, T7>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, T7, Result<T1, T2, T3, T4, T5, T6, T7>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7>> ThenAsync<T1, T2, T3, T4, T5, T6, T7>(this Task<Result<T1, T2, T3, T4, T5, T6, T7>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, T7, Task<Result<T1, T2, T3, T4, T5, T6, T7>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Async Then awaiting result then chaining a sync transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <typeparam name="T8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>> ThenAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, T7, T8, Result<T1, T2, T3, T4, T5, T6, T7, T8>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return result.Then(then, copyReasonsAndMetadata);
    }
    
    /// <summary>
    /// Async Then awaiting result then chaining an async transformation.
    /// </summary>
    /// <typeparam name="T1">Value type 1.</typeparam>
    /// <typeparam name="T2">Value type 2.</typeparam>
    /// <typeparam name="T3">Value type 3.</typeparam>
    /// <typeparam name="T4">Value type 4.</typeparam>
    /// <typeparam name="T5">Value type 5.</typeparam>
    /// <typeparam name="T6">Value type 6.</typeparam>
    /// <typeparam name="T7">Value type 7.</typeparam>
    /// <typeparam name="T8">Value type 8.</typeparam>
    /// <param name="awaitableResult">The awaitable result instance.</param>
    /// <param name="then">The async transformation function.</param>
    /// <param name="copyReasonsAndMetadata">Whether to copy reasons and metadata from original result.</param>
    /// <returns>A task with the new result.</returns>
    public static async Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>> ThenAsync<T1, T2, T3, T4, T5, T6, T7, T8>(this Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>> awaitableResult, Func<T1, T2, T3, T4, T5, T6, T7, T8, Task<Result<T1, T2, T3, T4, T5, T6, T7, T8>>> then, bool copyReasonsAndMetadata = true) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        var result = await awaitableResult.ConfigureAwait(false);
        return await result.ThenAsync(then, copyReasonsAndMetadata).ConfigureAwait(false);
    }
    
    #endregion // Arity 8
}
