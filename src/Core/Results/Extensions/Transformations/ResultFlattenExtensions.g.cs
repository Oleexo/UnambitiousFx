// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable


namespace UnambitiousFx.Core.Results.Extensions.Transformations;

public static partial class ResultFlattenExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1> Flatten<TValue1>(this Result<Result<TValue1>> result) where TValue1 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2> Flatten<TValue1, TValue2>(this Result<Result<TValue1, TValue2>> result) where TValue1 : notnull where TValue2 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3> Flatten<TValue1, TValue2, TValue3>(this Result<Result<TValue1, TValue2, TValue3>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4> Flatten<TValue1, TValue2, TValue3, TValue4>(this Result<Result<TValue1, TValue2, TValue3, TValue4>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5> Flatten<TValue1, TValue2, TValue3, TValue4, TValue5>(this Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> Flatten<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>(this Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> Flatten<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>(this Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Flattens a nested Result, removing one level of nesting.
    /// </summary>
    /// <typeparam name="TValue1">Value type 1.</typeparam>
    /// <typeparam name="TValue2">Value type 2.</typeparam>
    /// <typeparam name="TValue3">Value type 3.</typeparam>
    /// <typeparam name="TValue4">Value type 4.</typeparam>
    /// <typeparam name="TValue5">Value type 5.</typeparam>
    /// <typeparam name="TValue6">Value type 6.</typeparam>
    /// <typeparam name="TValue7">Value type 7.</typeparam>
    /// <typeparam name="TValue8">Value type 8.</typeparam>
    /// <param name="result">The nested result instance.</param>
    /// <returns>The inner result.</returns>
    public static Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> Flatten<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>(this Result<Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8>> result) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull {
        return result.Bind(inner => inner);
    }
    
    #endregion // Arity 8
}
