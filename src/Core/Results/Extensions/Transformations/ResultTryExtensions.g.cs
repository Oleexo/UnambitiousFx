// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System;
using System.Threading.Tasks;

namespace UnambitiousFx.Core.Results.Extensions.Transformations;

public static partial class ResultTryExtensions
{
    #region Arity 1
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1> Try<TValue1, TOut1>(this Result<TValue1> result, Func<TValue1, TOut1> func) where TValue1 : notnull where TOut1 : notnull {
        return result.Bind(value => {
                        try {
                            var newValue = func(value);
                            return Result.Success(newValue);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1>> TryAsync<TValue1, TOut1>(this Result<TValue1> result, Func<TValue1, Task<TOut1>> func) where TValue1 : notnull where TOut1 : notnull {
        return await result.Match(
            async v => {
                try {
                    return Result.Success(await func(v).ConfigureAwait(false));
                } catch (Exception ex) {
                    return Result.Failure<TOut1>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1>> TryAsync<TValue1, TOut1>(this Result<TValue1> result, Func<TValue1, ValueTask<TOut1>> func) where TValue1 : notnull where TOut1 : notnull {
        return await result.Match(
            async v => {
                try {
                    return Result.Success(await func(v).ConfigureAwait(false));
                } catch (Exception ex) {
                    return Result.Failure<TOut1>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 1
    
    #region Arity 2
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2> Try<TValue1, TValue2, TOut1, TOut2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, (TOut1, TOut2)> func) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        return result.Bind((value1,
                                    value2) => {
                        try {
                            var items = func(value1, value2);
                            return Result.Success(items.Item1, items.Item2);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2>> TryAsync<TValue1, TValue2, TOut1, TOut2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, Task<(TOut1, TOut2)>> func) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        return await result.Match(
            async (v1, v2) => {
                try {
                    var value = await func(v1, v2).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2>> TryAsync<TValue1, TValue2, TOut1, TOut2>(this Result<TValue1, TValue2> result, Func<TValue1, TValue2, ValueTask<(TOut1, TOut2)>> func) where TValue1 : notnull where TValue2 : notnull where TOut1 : notnull where TOut2 : notnull {
        return await result.Match(
            async (v1, v2) => {
                try {
                    var value = await func(v1, v2).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 2
    
    #region Arity 3
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3> Try<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, (TOut1, TOut2, TOut3)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3) => {
                        try {
                            var items = func(value1, value2, value3);
                            return Result.Success(items.Item1, items.Item2, items.Item3);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3>> TryAsync<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, Task<(TOut1, TOut2, TOut3)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return await result.Match(
            async (v1, v2, v3) => {
                try {
                    var value = await func(v1, v2, v3).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3>> TryAsync<TValue1, TValue2, TValue3, TOut1, TOut2, TOut3>(this Result<TValue1, TValue2, TValue3> result, Func<TValue1, TValue2, TValue3, ValueTask<(TOut1, TOut2, TOut3)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull {
        return await result.Match(
            async (v1, v2, v3) => {
                try {
                    var value = await func(v1, v2, v3).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 3
    
    #region Arity 4
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4> Try<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, (TOut1, TOut2, TOut3, TOut4)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3,
                                    value4) => {
                        try {
                            var items = func(value1, value2, value3, value4);
                            return Result.Success(items.Item1, items.Item2, items.Item3, items.Item4);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3, TOut4>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3, TOut4>> TryAsync<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, Task<(TOut1, TOut2, TOut3, TOut4)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4) => {
                try {
                    var value = await func(v1, v2, v3, v4).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4>> TryAsync<TValue1, TValue2, TValue3, TValue4, TOut1, TOut2, TOut3, TOut4>(this Result<TValue1, TValue2, TValue3, TValue4> result, Func<TValue1, TValue2, TValue3, TValue4, ValueTask<(TOut1, TOut2, TOut3, TOut4)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4) => {
                try {
                    var value = await func(v1, v2, v3, v4).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 4
    
    #region Arity 5
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5> Try<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, (TOut1, TOut2, TOut3, TOut4, TOut5)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5) => {
                        try {
                            var items = func(value1, value2, value3, value4, value5);
                            return Result.Success(items.Item1, items.Item2, items.Item3, items.Item4, items.Item5);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3, TOut4, TOut5>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, Task<(TOut1, TOut2, TOut3, TOut4, TOut5)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TOut1, TOut2, TOut3, TOut4, TOut5>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 5
    
    #region Arity 6
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6> Try<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5,
                                    value6) => {
                        try {
                            var items = func(value1, value2, value3, value4, value5, value6);
                            return Result.Success(items.Item1, items.Item2, items.Item3, items.Item4, items.Item5, items.Item6);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, Task<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 6
    
    #region Arity 7
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7> Try<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5,
                                    value6,
                                    value7) => {
                        try {
                            var items = func(value1, value2, value3, value4, value5, value6, value7);
                            return Result.Success(items.Item1, items.Item2, items.Item3, items.Item4, items.Item5, items.Item6, items.Item7);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, Task<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6, v7) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6, v7).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6, value.Item7);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6, v7) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6, v7).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6, value.Item7);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 7
    
    #region Arity 8
    
    /// <summary>
    /// Executes a function that may throw, catching exceptions and converting to Result failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The function to execute.</param>
    /// <returns>A new result with transformed value(s) or failure.</returns>
    public static Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8> Try<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, (TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8)> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return result.Bind((value1,
                                    value2,
                                    value3,
                                    value4,
                                    value5,
                                    value6,
                                    value7,
                                    value8) => {
                        try {
                            var items = func(value1, value2, value3, value4, value5, value6, value7, value8);
                            return Result.Success(items.Item1, items.Item2, items.Item3, items.Item4, items.Item5, items.Item6, items.Item7, items.Item8);
                        }
                        catch (Exception ex) {
                            return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(ex);
                        }
                    });
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async Task<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, Task<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6, v7, v8) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6, v7, v8).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6, value.Item7, value.Item8);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(ex);
                }
            },
            e => Task.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(e))
        ).ConfigureAwait(false);
    }
    
    /// <summary>
    /// Async Try executing an async function, catching exceptions and converting to Result.Failure.
    /// </summary>
    /// <typeparam name="TValue1">Input value type 1.</typeparam>
    /// <typeparam name="TValue2">Input value type 2.</typeparam>
    /// <typeparam name="TValue3">Input value type 3.</typeparam>
    /// <typeparam name="TValue4">Input value type 4.</typeparam>
    /// <typeparam name="TValue5">Input value type 5.</typeparam>
    /// <typeparam name="TValue6">Input value type 6.</typeparam>
    /// <typeparam name="TValue7">Input value type 7.</typeparam>
    /// <typeparam name="TValue8">Input value type 8.</typeparam>
    /// <typeparam name="TOut1">Output value type 1.</typeparam>
    /// <typeparam name="TOut2">Output value type 2.</typeparam>
    /// <typeparam name="TOut3">Output value type 3.</typeparam>
    /// <typeparam name="TOut4">Output value type 4.</typeparam>
    /// <typeparam name="TOut5">Output value type 5.</typeparam>
    /// <typeparam name="TOut6">Output value type 6.</typeparam>
    /// <typeparam name="TOut7">Output value type 7.</typeparam>
    /// <typeparam name="TOut8">Output value type 8.</typeparam>
    /// <param name="result">The result instance.</param>
    /// <param name="func">The async function to execute.</param>
    /// <returns>A task with the result of the operation.</returns>
    public static async ValueTask<Result<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>> TryAsync<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(this Result<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8> result, Func<TValue1, TValue2, TValue3, TValue4, TValue5, TValue6, TValue7, TValue8, ValueTask<(TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8)>> func) where TValue1 : notnull where TValue2 : notnull where TValue3 : notnull where TValue4 : notnull where TValue5 : notnull where TValue6 : notnull where TValue7 : notnull where TValue8 : notnull where TOut1 : notnull where TOut2 : notnull where TOut3 : notnull where TOut4 : notnull where TOut5 : notnull where TOut6 : notnull where TOut7 : notnull where TOut8 : notnull {
        return await result.Match(
            async (v1, v2, v3, v4, v5, v6, v7, v8) => {
                try {
                    var value = await func(v1, v2, v3, v4, v5, v6, v7, v8).ConfigureAwait(false);
                    return Result.Success(value.Item1, value.Item2, value.Item3, value.Item4, value.Item5, value.Item6, value.Item7, value.Item8);
                } catch (Exception ex) {
                    return Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(ex);
                }
            },
            e => ValueTask.FromResult(Result.Failure<TOut1, TOut2, TOut3, TOut4, TOut5, TOut6, TOut7, TOut8>(e))
        ).ConfigureAwait(false);
    }
    
    #endregion // Arity 8
}
