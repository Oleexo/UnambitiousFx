// <auto-generated>
// Added error message shaping helpers: PrependError / AppendError (all arities 0..8)
// </auto-generated>
using System;

namespace UnambitiousFx.Core.Results;

public static class PrependAppendErrorExtensions {
    private static T Preserve<T>(BaseResult original, T mapped) where T : BaseResult {
        if (!ReferenceEquals(original, mapped)) {
            foreach (var r in original.Reasons) mapped.AddReason(r);
            foreach (var kv in original.Metadata) mapped.AddMetadata(kv.Key, kv.Value);
        }
        return mapped;
    }

    // Arity 0
    public static Result PrependError(this Result result, string prefix) {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result; // no-op
        var mapped = result.MapError(e => new Exception(prefix + e.Message, e));
        return Preserve(result, mapped);
    }
    public static Result AppendError(this Result result, string suffix) {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        var mapped = result.MapError(e => new Exception(e.Message + suffix, e));
        return Preserve(result, mapped);
    }

    // Arity 1
    public static Result<T1> PrependError<T1>(this Result<T1> result, string prefix)
        where T1 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result; // no-op
        var mapped = result.MapError(e => new Exception(prefix + e.Message, e));
        return Preserve(result, mapped);
    }
    public static Result<T1> AppendError<T1>(this Result<T1> result, string suffix)
        where T1 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result; // no-op
        var mapped = result.MapError(e => new Exception(e.Message + suffix, e));
        return Preserve(result, mapped);
    }

    // Helper macro-like method
    private static Result<T1, T2> ShapeError<T1, T2>(this Result<T1, T2> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3> ShapeError<T1, T2, T3>(this Result<T1, T2, T3> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3, T4> ShapeError<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3, T4, T5> ShapeError<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3, T4, T5, T6> ShapeError<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3, T4, T5, T6, T7> ShapeError<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));
    private static Result<T1, T2, T3, T4, T5, T6, T7, T8> ShapeError<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, Func<Exception, Exception> shape)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull => result.IsSuccess ? result : Preserve(result, result.MapError(shape));

    // Arity 2..8 Prepend
    public static Result<T1, T2> PrependError<T1, T2>(this Result<T1, T2> result, string prefix)
        where T1 : notnull where T2 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3> PrependError<T1, T2, T3>(this Result<T1, T2, T3> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3, T4> PrependError<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3, T4, T5> PrependError<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6> PrependError<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6, T7> PrependError<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6, T7, T8> PrependError<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, string prefix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(prefix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(prefix + e.Message, e));
    }

    // Arity 2..8 Append
    public static Result<T1, T2> AppendError<T1, T2>(this Result<T1, T2> result, string suffix)
        where T1 : notnull where T2 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3> AppendError<T1, T2, T3>(this Result<T1, T2, T3> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3, T4> AppendError<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3, T4, T5> AppendError<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6> AppendError<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6, T7> AppendError<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }
    public static Result<T1, T2, T3, T4, T5, T6, T7, T8> AppendError<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, string suffix)
        where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull {
        if (result == null) throw new ArgumentNullException(nameof(result));
        if (string.IsNullOrEmpty(suffix) || result.IsSuccess) return result;
        return result.ShapeError(e => new Exception(e.Message + suffix, e));
    }

    // WithContext convenience (delegates to PrependError) - arity 0..8
    public static Result WithContext(this Result result, string context) => result.PrependError(context);
    public static Result<T1> WithContext<T1>(this Result<T1> result, string context) where T1 : notnull => result.PrependError(context);
    public static Result<T1, T2> WithContext<T1, T2>(this Result<T1, T2> result, string context) where T1 : notnull where T2 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3> WithContext<T1, T2, T3>(this Result<T1, T2, T3> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3, T4> WithContext<T1, T2, T3, T4>(this Result<T1, T2, T3, T4> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3, T4, T5> WithContext<T1, T2, T3, T4, T5>(this Result<T1, T2, T3, T4, T5> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3, T4, T5, T6> WithContext<T1, T2, T3, T4, T5, T6>(this Result<T1, T2, T3, T4, T5, T6> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3, T4, T5, T6, T7> WithContext<T1, T2, T3, T4, T5, T6, T7>(this Result<T1, T2, T3, T4, T5, T6, T7> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull => result.PrependError(context);
    public static Result<T1, T2, T3, T4, T5, T6, T7, T8> WithContext<T1, T2, T3, T4, T5, T6, T7, T8>(this Result<T1, T2, T3, T4, T5, T6, T7, T8> result, string context) where T1 : notnull where T2 : notnull where T3 : notnull where T4 : notnull where T5 : notnull where T6 : notnull where T7 : notnull where T8 : notnull => result.PrependError(context);
}
