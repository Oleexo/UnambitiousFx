// <auto-generated>
//     This code was generated by UnambitiousFx.Core.CodeGen.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>

#nullable enable

using System.Diagnostics.CodeAnalysis;
using UnambitiousFx.Core.Results.Reasons;

namespace UnambitiousFx.Core.Results;

internal sealed class SuccessResult<TValue1> : Result<TValue1>, ISuccessResult
    where TValue1 : notnull
{
    private readonly TValue1 _value1;
    
    public SuccessResult(TValue1 value1) {
        _value1 = value1;
    }
    
    public override bool IsFaulted => false;
    public override bool IsSuccess => true;
    
    public override void Match(Action success, Action<IEnumerable<IError>> failure) {
        success();
    }
    
    public override TOut Match<TOut>(Func<TOut> success, Func<IEnumerable<IError>, TOut> failure) {
        return success();
    }
    
    public override void IfSuccess(Action action) {
        action();
    }
    
    public override void Match(Action<TValue1> success, Action<IEnumerable<IError>> failure) {
        success(_value1);
    }
    
    public override TOut Match<TOut>(Func<TValue1, TOut> success, Func<IEnumerable<IError>, TOut> failure) {
        return success(_value1);
    }
    
    public override void IfSuccess(Action<TValue1> action) {
        action(_value1);
    }
    
    public override void IfFailure(Action<IEnumerable<IError>> action) {
    }
    
    public override bool TryGet([NotNullWhen(true)] out TValue1? value1) {
        value1 = _value1;
        return true;
    }
    
    public override bool TryGet([NotNullWhen(true)] out TValue1? value1, [NotNullWhen(false)] out IEnumerable<IError>? errors) {
        value1 = _value1;
        errors = null;
        return true;
    }
    
    public override bool TryGet([NotNullWhen(false)] out IEnumerable<IError>? errors) {
        errors = Errors;
        return false;
    }
    
    public override void Deconstruct(out bool isSuccess, out TValue1? value, out IEnumerable<IError>? error) {
        isSuccess = true;
        value = _value1;
        error = null;
    }
    
}
