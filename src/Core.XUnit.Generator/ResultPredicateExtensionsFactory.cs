using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.XUnit.Generator;

internal sealed class ResultPredicateExtensionsFactory(string targetNamespace) {
    public SourceText GenerateNonGeneric() {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine("#pragma warning disable CS1591");
        tw.WriteLine("using System;");
        tw.WriteLine("using System.Threading.Tasks;");
        tw.WriteLine("using Xunit;");
        tw.WriteLine("using UnambitiousFx.Core.Results;");
        tw.WriteLine($"namespace {targetNamespace};");
        tw.WriteLine("public static partial class ResultPredicateGeneratedExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("public static Result ShouldBeFailureWhere(this Result result, Func<Exception,bool> predicate, string? because = null)");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("ArgumentNullException.ThrowIfNull(predicate);");
        tw.WriteLine("if (result.Ok(out var err)) Assert.Fail(because ?? \"Expected failure but was success.\");");
        tw.WriteLine("if (!predicate(err!)) Assert.Fail(because ?? $\"Error '{err!.Message}' does not satisfy predicate.\");");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate(int arity) {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        var genericList = string.Join(", ", Enumerable.Range(1, arity)
                                                      .Select(i => $"T{i}"));
        var genericConstraints = string.Join(" ", Enumerable.Range(1, arity)
                                                            .Select(i => $"where T{i} : notnull"));
        var tupleType = arity == 1
                            ? "T1"
                            : $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"T{i}"))})";
        var outOkTuple = arity == 1
                             ? "out T1? value"
                             : $"out ({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"T{i}"))}) value";
        var discardTuple = arity == 1
                               ? "out T1? _"
                               : $"out ({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"T{i}"))}) _";
        const string tupleVar = "value";

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine("#pragma warning disable CS1591");
        tw.WriteLine("using System;");
        tw.WriteLine("using System.Threading.Tasks;");
        tw.WriteLine("using Xunit;");
        tw.WriteLine("using UnambitiousFx.Core.Results;");
        tw.WriteLine($"namespace {targetNamespace};");
        tw.WriteLine("public static partial class ResultPredicateGeneratedExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        // Success predicate
        tw.WriteLine(
            $"public static Result<{genericList}> ShouldBeSuccessWhere<{genericList}>(this Result<{genericList}> result, Func<{tupleType}, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("ArgumentNullException.ThrowIfNull(predicate);");
        tw.WriteLine($"if (!result.Ok({outOkTuple}))");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("Assert.Fail(because ?? \"Expected success but was failure.\");");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine($"if (!predicate({tupleVar}!))");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine($"Assert.Fail(because ?? $\"Value '{{{tupleVar}}}' does not satisfy predicate.\");");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");
        // Failure predicate
        tw.WriteLine(
            $"public static Result<{genericList}> ShouldBeFailureWhere<{genericList}>(this Result<{genericList}> result, Func<Exception, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("ArgumentNullException.ThrowIfNull(predicate);");
        tw.WriteLine($"if (result.Ok({discardTuple}, out var err))");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("Assert.Fail(because ?? \"Expected failure but was success.\");");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine("if (!predicate(err!))");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("Assert.Fail(because ?? $\"Error '{err!.Message}' does not satisfy predicate.\");");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");
        // Async success predicate (Task)
        tw.WriteLine(
            $"public static async Task<Result<{genericList}>> ShouldBeSuccessWhereAsync<{genericList}>(this Task<Result<{genericList}>> task, Func<{tupleType}, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("var r = await task.ConfigureAwait(false);");
        tw.WriteLine("r.ShouldBeSuccessWhere(predicate, because);");
        tw.WriteLine("return r;");
        tw.Indent--;
        tw.WriteLine("}");
        // Async failure predicate (Task)
        tw.WriteLine(
            $"public static async Task<Result<{genericList}>> ShouldBeFailureWhereAsync<{genericList}>(this Task<Result<{genericList}>> task, Func<Exception, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("var r = await task.ConfigureAwait(false);");
        tw.WriteLine("r.ShouldBeFailureWhere(predicate, because);");
        tw.WriteLine("return r;");
        tw.Indent--;
        tw.WriteLine("}");
        // Async success predicate (ValueTask)
        tw.WriteLine(
            $"public static async ValueTask<Result<{genericList}>> ShouldBeSuccessWhereAsync<{genericList}>(this ValueTask<Result<{genericList}>> task, Func<{tupleType}, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("var r = await task.ConfigureAwait(false);");
        tw.WriteLine("r.ShouldBeSuccessWhere(predicate, because);");
        tw.WriteLine("return r;");
        tw.Indent--;
        tw.WriteLine("}");
        // Async failure predicate (ValueTask)
        tw.WriteLine(
            $"public static async ValueTask<Result<{genericList}>> ShouldBeFailureWhereAsync<{genericList}>(this ValueTask<Result<{genericList}>> task, Func<Exception, bool> predicate, string? because = null) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("var r = await task.ConfigureAwait(false);");
        tw.WriteLine("r.ShouldBeFailureWhere(predicate, because);");
        tw.WriteLine("return r;");
        tw.Indent--;
        tw.WriteLine("}");
        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
