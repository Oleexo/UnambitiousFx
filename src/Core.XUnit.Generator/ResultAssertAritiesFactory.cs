using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.XUnit.Generator;

internal sealed class ResultAssertAritiesFactory(string targetNamespace)
{
    public SourceText Generate(int arity)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        var genericList = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"T{i}"));
        var genericConstraints = string.Join(" ", Enumerable.Range(1, arity).Select(i => $"where T{i} : notnull"));
        var tupleType = $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"T{i}"))})";
        var tupleOut = $"out {tupleType} values";
        var tupleDiscard = $"out {tupleType} _";

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine("#pragma warning disable CS1591");
        tw.WriteLine("using System;");
        tw.WriteLine("using System.Diagnostics;");
        tw.WriteLine("using UnambitiousFx.Core.Results;");
        tw.WriteLine("using Xunit;");
        tw.WriteLine($"namespace {targetNamespace};");
        tw.WriteLine("public static partial class ResultAssertExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        // ShouldBeSuccess with out tuple
        tw.WriteLine($"/// <summary>Asserts that a {arity}-value result is success and assigns the tuple of values.</summary>");
        tw.WriteLine($"public static Result<{genericList}> ShouldBeSuccess<{genericList}>(this Result<{genericList}> result, {tupleOut}) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("if (!result.Ok(out var tmp)) {");
        tw.Indent++;
        tw.WriteLine("Assert.Fail(SuccessExpected);");
        tw.WriteLine("throw new UnreachableException();");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine("values = tmp;");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine();

        // ShouldBeSuccess with Action
        tw.WriteLine($"/// <summary>Asserts success for a {arity}-value result and runs additional assertions.</summary>");
        tw.WriteLine($"public static Result<{genericList}> ShouldBeSuccess<{genericList}>(this Result<{genericList}> result, Action<{genericList}> assert) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("result.ShouldBeSuccess(out var v);");
        var items = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"v.Item{i}"));
        tw.WriteLine($"assert({items});");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine();

        // ShouldBeFailure with out Exception
        tw.WriteLine($"/// <summary>Asserts failure for a {arity}-value result and extracts the error.</summary>");
        tw.WriteLine($"public static Result<{genericList}> ShouldBeFailure<{genericList}>(this Result<{genericList}> result, out Exception error) {genericConstraints}");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine($"if (result.Ok({tupleDiscard}, out var tmpError)) {{");
        tw.Indent++;
        tw.WriteLine("Assert.Fail(FailureExpected);");
        tw.WriteLine("throw new UnreachableException();");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine("error = tmpError;");
        tw.WriteLine("return result;");
        tw.Indent--;
        tw.WriteLine("}");

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
