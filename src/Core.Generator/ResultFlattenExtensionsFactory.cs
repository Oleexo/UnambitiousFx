using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultFlattenExtensionsFactory(string @namespace, ushort maxOfParameters)
{
    public SourceText GenerateTask() => GenerateAsync("Task", "Tasks",
        (failureExpr, genericOut) => $"Task.FromResult<{genericOut}>({failureExpr})");
    public SourceText GenerateValueTask() => GenerateAsync("ValueTask", "ValueTasks",
        (failureExpr, genericOut) => $"new ValueTask<{genericOut}>({failureExpr})");

    private SourceText GenerateAsync(string taskKeyword, string subNamespace, Func<string,string,string> wrap)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericInner = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var constraints = string.Join(" ", Enumerable.Range(1, i).Select(x => $"where TValue{x} : notnull"));
            tw.WriteLine($"public static async {taskKeyword}<Result<{genericInner}>> Flatten<{genericInner}>(this {taskKeyword}<Result<Result<{genericInner}>>> awaitable) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("var outer = await awaitable;");
            tw.WriteLine("return outer.Flatten();");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericInner = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var constraints = string.Join(" ", Enumerable.Range(1, i).Select(x => $"where TValue{x} : notnull"));
            tw.WriteLine($"public static Result<{genericInner}> Flatten<{genericInner}>(this Result<Result<{genericInner}>> result) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("return result.Bind(inner => inner);");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}

