using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultMapErrorExtensionsFactory(string @namespace,
                                                      ushort maxOfParameters) {
    public SourceText GenerateTask() {
        return GenerateAsync("Task", "Tasks",
                             (input,
                              genericParameters) => $"Task.FromResult<Result<{genericParameters}>>({input})");
    }

    public SourceText GenerateValueTask() {
        return GenerateAsync("ValueTask", "ValueTasks",
                             (input,
                              genericParameters) => $"new ValueTask<Result<{genericParameters}>>({input})");
    }

    private SourceText GenerateAsync(string                       taskKeyWork,
                                     string                       subNamespace,
                                     Func<string, string, string> newFromResultFunc) {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            if (i == 1) {
                tw.WriteLine(
                    $"public static {taskKeyWork}<Result<TValue>> MapErrorAsync<TValue>(this Result<TValue> result, Func<Exception, {taskKeyWork}<Exception>> mapError)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine($"return result.Match<{taskKeyWork}<Result<TValue>>>(");
                tw.Indent++;
                tw.WriteLine($"value => {newFromResultFunc("Result.Success<TValue>(value)", "TValue")},");
                tw.WriteLine("async ex => Result.Failure<TValue>(await mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();

                tw.WriteLine(
                    $"public static {taskKeyWork}<Result<TValue>> MapErrorAsync<TValue>(this {taskKeyWork}<Result<TValue>> awaitableResult, Func<Exception, {taskKeyWork}<Exception>> mapError)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine($"return awaitableResult.MatchAsync<Result<TValue>, TValue>(");
                tw.Indent++;
                tw.WriteLine($"value => {newFromResultFunc("Result.Success<TValue>(value)", "TValue")},");
                tw.WriteLine("async ex => Result.Failure<TValue>(await mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");

                tw.Indent--;
                tw.WriteLine("}");
            }
            else {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));

                tw.WriteLine(
                    $"public static {taskKeyWork}<Result<{genericInputParameters}>> MapErrorAsync<{genericInputParameters}>(this Result<{genericInputParameters}> result, Func<Exception, {taskKeyWork}<Exception>> mapError)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine($"return result.Match<{taskKeyWork}<Result<{genericInputParameters}>>>(");
                tw.Indent++;
                tw.WriteLine($"({callParameters}) => {newFromResultFunc($"Result.Success<{genericInputParameters}>({callParameters})", genericInputParameters)},");
                tw.WriteLine($"async (ex) => Result.Failure<{genericInputParameters}>(await mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();

                tw.WriteLine(
                    $"public static  {taskKeyWork}<Result<{genericInputParameters}>> MapErrorAsync<{genericInputParameters}>(this {taskKeyWork}<Result<{genericInputParameters}>> awaitableResult, Func<Exception, {taskKeyWork}<Exception>> mapError)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("return awaitableResult.MatchAsync(");
                tw.Indent++;
                tw.WriteLine($"({callParameters}) => {newFromResultFunc($"Result.Success<{genericInputParameters}>({callParameters})", genericInputParameters)},");
                tw.WriteLine($"async (ex) => Result.Failure<{genericInputParameters}>(await mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate() {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            if (i == 1) {
                tw.WriteLine("public static Result<TValue> MapError<TValue>(this Result<TValue> result, Func<Exception, Exception> mapError)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("return result.Match(");
                tw.Indent++;
                tw.WriteLine("value => Result.Success<TValue>(value),");
                tw.WriteLine("ex => Result.Failure<TValue>(mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
            else {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));
                tw.WriteLine(
                    $"public static Result<{genericInputParameters}> MapError<{genericInputParameters}>(this Result<{genericInputParameters}> result, Func<Exception, Exception> mapError)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("return result.Match(");
                tw.Indent++;
                tw.WriteLine($"({callParameters}) => Result.Success<{genericInputParameters}>({callParameters}),");
                tw.WriteLine($"ex => Result.Failure<{genericInputParameters}>(mapError(ex))");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
