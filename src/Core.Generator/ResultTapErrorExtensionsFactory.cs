using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultTapErrorExtensionsFactory(string @namespace,
                                                     ushort maxOfParameters) {
    public SourceText GenerateTask() {
        return GenerateAsync("Task", "Tasks");
    }

    public SourceText GenerateValueTask() {
        return GenerateAsync("ValueTask", "ValueTasks");
    }

    private SourceText GenerateAsync(string taskKeyWork,
                                     string subNamespace) {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            if (i == 1) {
                // TapErrorAsync for Result<T>
                if (taskKeyWork == "Task") {
                    tw.WriteLine("public static async Task<Result<TValue>> TapErrorAsync<TValue>(this Result<TValue> result, Func<Exception, Task> tap)");
                }
                else {
                    tw.WriteLine("public static ValueTask<Result<TValue>> TapErrorAsync<TValue>(this Result<TValue> result, Func<Exception, ValueTask> tap)");
                }
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                if (taskKeyWork == "Task") {
                    tw.WriteLine("return await result.Match<" + taskKeyWork + "<Result<TValue>>>(");
                    tw.Indent++;
                    tw.WriteLine("value => Task.FromResult(Result.Success<TValue>(value)),");
                    tw.WriteLine("async ex => { await tap(ex); return Result.Failure<TValue>(ex); }");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                else {
                    tw.WriteLine("return result.Match<" + taskKeyWork + "<Result<TValue>>>(");
                    tw.Indent++;
                    tw.WriteLine("value => new ValueTask<Result<TValue>>(Result.Success<TValue>(value)),");
                    tw.WriteLine("async ex => { await tap(ex); return Result.Failure<TValue>(ex); }");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();

                // TapErrorAsync for awaitable Result<T>
                tw.WriteLine($"public static async {taskKeyWork}<Result<TValue>> TapErrorAsync<TValue>(this {taskKeyWork}<Result<TValue>> awaitableResult, Func<Exception, {taskKeyWork}> tap)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("var result = await awaitableResult;");
                if (taskKeyWork == "Task") {
                    tw.WriteLine("return await result.Match<Task<Result<TValue>>>(");
                    tw.Indent++;
                    tw.WriteLine("value => Task.FromResult(Result.Success<TValue>(value)),");
                    tw.WriteLine("async ex => { await tap(ex); return Result.Failure<TValue>(ex); }");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                else {
                    tw.WriteLine("return await result.Match<ValueTask<Result<TValue>>>(");
                    tw.Indent++;
                    tw.WriteLine("value => new ValueTask<Result<TValue>>(Result.Success<TValue>(value)),");
                    tw.WriteLine("async ex => { await tap(ex); return Result.Failure<TValue>(ex); }");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                tw.Indent--;
                tw.WriteLine("}");
            }
            else {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));

                tw.WriteLine($"public static async {taskKeyWork}<Result<{genericInputParameters}>> TapErrorAsync<{genericInputParameters}>(this Result<{genericInputParameters}> result, Func<Exception, {taskKeyWork}> tap)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                if (taskKeyWork == "Task") {
                    tw.WriteLine("return await result.Match<" + taskKeyWork + "<Result<" + genericInputParameters + ">>>(");
                    tw.Indent++;
                    tw.WriteLine($"({callParameters}) => Task.FromResult(Result.Success<{genericInputParameters}>({callParameters})),");
                    tw.WriteLine($"async ex => {{ await tap(ex); return Result.Failure<{genericInputParameters}>(ex); }}");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                else {
                    tw.WriteLine("return await result.Match<" + taskKeyWork + "<Result<" + genericInputParameters + ">>>(");
                    tw.Indent++;
                    tw.WriteLine($"({callParameters}) => new ValueTask<Result<{genericInputParameters}>>(Result.Success<{genericInputParameters}>({callParameters})),");
                    tw.WriteLine($"async ex => {{ await tap(ex); return Result.Failure<{genericInputParameters}>(ex); }}");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();

                tw.WriteLine($"public static async {taskKeyWork}<Result<{genericInputParameters}>> TapErrorAsync<{genericInputParameters}>(this {taskKeyWork}<Result<{genericInputParameters}>> awaitableResult, Func<Exception, {taskKeyWork}> tap)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("var result = await awaitableResult;");
                if (taskKeyWork == "Task") {
                    tw.WriteLine("return await result.Match<Task<Result<" + genericInputParameters + ">>>(");
                    tw.Indent++;
                    tw.WriteLine($"({callParameters}) => Task.FromResult(Result.Success<{genericInputParameters}>({callParameters})),");
                    tw.WriteLine($"async ex => {{ await tap(ex); return Result.Failure<{genericInputParameters}>(ex); }}");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                else {
                    tw.WriteLine("return await result.Match<ValueTask<Result<" + genericInputParameters + ">>>(");
                    tw.Indent++;
                    tw.WriteLine($"({callParameters}) => new ValueTask<Result<{genericInputParameters}>>(Result.Success<{genericInputParameters}>({callParameters})),");
                    tw.WriteLine($"async ex => {{ await tap(ex); return Result.Failure<{genericInputParameters}>(ex); }}");
                    tw.Indent--;
                    tw.WriteLine(");");
                }
                tw.Indent--;
                tw.WriteLine("}");
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate() {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            if (i == 1) {
                tw.WriteLine("public static Result<TValue> TapError<TValue>(this Result<TValue> result, Action<Exception> tap)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("return result.Match(");
                tw.Indent++;
                tw.WriteLine("value => Result.Success<TValue>(value),");
                tw.WriteLine("ex => { tap(ex); return Result.Failure<TValue>(ex); }");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
            else {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));
                tw.WriteLine($"public static Result<{genericInputParameters}> TapError<{genericInputParameters}>(this Result<{genericInputParameters}> result, Action<Exception> tap)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("return result.Match(");
                tw.Indent++;
                tw.WriteLine($"({callParameters}) => Result.Success<{genericInputParameters}>({callParameters}),");
                tw.WriteLine($"ex => {{ tap(ex); return Result.Failure<{genericInputParameters}>(ex); }}");
                tw.Indent--;
                tw.WriteLine(");");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
