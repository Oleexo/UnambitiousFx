using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultMatchExtensionsFactory(string @namespace,
                                                   ushort maxOfParameters) {
    public SourceText GenerateTask() {
        return GenerateAsync("Task", "Tasks");
    }

    public SourceText GenerateValueTask() {
        return GenerateAsync("ValueTask", "ValueTasks");
    }

    private SourceText GenerateAsync(string taskKeyWork,
                                     string subNamespace) {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            if (i == 1) {
                tw.WriteLine($"public static async {taskKeyWork}<TOut> MatchAsync<TOut, TValue>(this {taskKeyWork}<Result<TValue>> awaitableResult, Func<TValue, {taskKeyWork}<TOut>> success, Func<Exception, {taskKeyWork}<TOut>> failure)");
                tw.Indent++;
                tw.WriteLine("where TValue : notnull");
                tw.WriteLine("where TOut : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("var result = await awaitableResult;");
                tw.WriteLine($"return await result.Match<{taskKeyWork}<TOut>>(success, failure);");
                tw.Indent--;
                tw.WriteLine("}");
            }
            else {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"value{x}"));
                
                // MatchAsync for awaitable Result<T1,...,Ti>
                tw.WriteLine($"public static async {taskKeyWork}<TOut> MatchAsync<TOut, {genericInputParameters}>(this {taskKeyWork}<Result<{genericInputParameters}>> awaitableResult, Func<{genericInputParameters}, {taskKeyWork}<TOut>> success, Func<Exception, {taskKeyWork}<TOut>> failure)");
                tw.Indent++;
                foreach (var gp in genericInputParameters.Split(", ".ToCharArray()).Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {gp} : notnull");
                }
                tw.WriteLine("where TOut : notnull");
                tw.Indent--;
                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("var result = await awaitableResult;");
                tw.WriteLine($"return await result.Match<{taskKeyWork}<TOut>>(({callParameters}) => success({callParameters}), failure);");
                tw.Indent--;
                tw.WriteLine("}");
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
