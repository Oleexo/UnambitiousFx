using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultNonGenericAsyncErrorExtensionsFactory(string @namespace)
{
    public SourceText GenerateTask()
    {
        return Generate("Task");
    }
    public SourceText GenerateValueTask()
    {
        return Generate("ValueTask");
    }

    private SourceText Generate(string asyncKind)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{asyncKind}s;");
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        if (asyncKind == "Task")
        {
            tw.WriteLine("public static Task<Result> MapErrorAsync(this Result result, System.Func<System.Exception, Task<System.Exception>> map)");
            tw.WriteLine("{"); tw.Indent++;
            tw.WriteLine("if (result.Ok(out var _)) return Task.FromResult(result);");
            tw.WriteLine("result.Ok(out var primary);");
            tw.WriteLine("return Await();");
            tw.WriteLine("async Task<Result> Await(){ var mapped = await map(primary!); var failure = Result.Failure(mapped); CopyReasonsAndMetadata(result,failure); return failure; }");
            tw.Indent--; tw.WriteLine("}"); tw.WriteLine();
            tw.WriteLine("public static Task<Result> TapErrorAsync(this Result result, System.Func<System.Exception, Task> tap)");
            tw.WriteLine("{"); tw.Indent++;
            tw.WriteLine("if (result.Ok(out var _)) return Task.FromResult(result);");
            tw.WriteLine("result.Ok(out var primary);");
            tw.WriteLine("return Await();");
            tw.WriteLine("async Task<Result> Await(){ await tap(primary!); return result; }");
            tw.Indent--; tw.WriteLine("}");
        }
        else
        {
            tw.WriteLine("public static ValueTask<Result> MapErrorAsync(this Result result, System.Func<System.Exception, ValueTask<System.Exception>> map)");
            tw.WriteLine("{"); tw.Indent++;
            tw.WriteLine("if (result.Ok(out var _)) return new ValueTask<Result>(result);");
            tw.WriteLine("result.Ok(out var primary);");
            tw.WriteLine("return Await();");
            tw.WriteLine("async ValueTask<Result> Await(){ var mapped = await map(primary!); var failure = Result.Failure(mapped); CopyReasonsAndMetadata(result,failure); return failure; }");
            tw.Indent--; tw.WriteLine("}"); tw.WriteLine();
            tw.WriteLine("public static ValueTask<Result> TapErrorAsync(this Result result, System.Func<System.Exception, ValueTask> tap)");
            tw.WriteLine("{"); tw.Indent++;
            tw.WriteLine("if (result.Ok(out var _)) return new ValueTask<Result>(result);");
            tw.WriteLine("result.Ok(out var primary);");
            tw.WriteLine("return Await();");
            tw.WriteLine("async ValueTask<Result> Await(){ await tap(primary!); return result; }");
            tw.Indent--; tw.WriteLine("}");
        }
        tw.WriteLine("private static void CopyReasonsAndMetadata(BaseResult from, BaseResult to){ foreach(var r in from.Reasons) to.AddReason(r); foreach(var kv in from.Metadata) to.AddMetadata(kv.Key, kv.Value);} ");
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
