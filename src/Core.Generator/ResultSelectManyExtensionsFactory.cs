using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultSelectManyExtensionsFactory(string @namespace, ushort maxOfParameters)
{
    public SourceText GenerateTask()
    {
        return GenerateAsync("Task", "Tasks",
            (failureExpr, genericOut) => $"Task.FromResult<Result<{genericOut}>>({failureExpr})");
    }

    public SourceText GenerateValueTask()
    {
        return GenerateAsync("ValueTask", "ValueTasks",
            (failureExpr, genericOut) => $"new ValueTask<Result<{genericOut}>>({failureExpr})");
    }

    private SourceText GenerateAsync(string taskKeyword, string subNamespace, Func<string, string, string> makeFailure)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericInputParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var callParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"value{x}"));
            var genericAll = genericInputParameters + ", TCollection, TResult";
            // Async collectionSelector returning Task/ValueTask<Result<TCollection>>
            tw.WriteLine($"public static {taskKeyword}<Result<TResult>> SelectMany<{genericAll}>(this Result<{genericInputParameters}> source, Func<{genericInputParameters}, {taskKeyword}<Result<TCollection>>> collectionSelector, Func<{genericInputParameters}, TCollection, TResult> resultSelector)");
            tw.Indent++;
            foreach (var gp in genericAll.Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries))
            {
                tw.WriteLine($"where {gp} : notnull");
            }
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return source.Match<{taskKeyword}<Result<TResult>>>(async ({callParameters}) => {{");
            tw.Indent++;
            tw.WriteLine($"var inner = await collectionSelector({callParameters});");
            tw.WriteLine($"return inner.Map(c => resultSelector({callParameters}, c));");
            tw.Indent--;
            tw.WriteLine("}, e => " + makeFailure("Result.Failure<TResult>(e)", "TResult") + ");");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
            // Async when source is awaitable
            tw.WriteLine($"public static {taskKeyword}<Result<TResult>> SelectMany<{genericAll}>(this {taskKeyword}<Result<{genericInputParameters}>> awaitableSource, Func<{genericInputParameters}, {taskKeyword}<Result<TCollection>>> collectionSelector, Func<{genericInputParameters}, TCollection, TResult> resultSelector)");
            tw.Indent++;
            foreach (var gp in genericAll.Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries))
            {
                tw.WriteLine($"where {gp} : notnull");
            }
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return awaitableSource.MatchAsync<Result<TResult>, {genericInputParameters}>(async ({callParameters}) => {{");
            tw.Indent++;
            tw.WriteLine($"var inner = await collectionSelector({callParameters});");
            tw.WriteLine($"return inner.Map(c => resultSelector({callParameters}, c));");
            tw.Indent--;
            tw.WriteLine("}, e => " + makeFailure("Result.Failure<TResult>(e)", "TResult") + ");");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericInputParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var callParameters = string.Join(", ", Enumerable.Range(1, i).Select(x => $"value{x}"));
            var genericAll = genericInputParameters + ", TCollection, TResult";
            tw.WriteLine($"public static Result<TResult> SelectMany<{genericAll}>(this Result<{genericInputParameters}> source, Func<{genericInputParameters}, Result<TCollection>> collectionSelector, Func<{genericInputParameters}, TCollection, TResult> resultSelector)");
            tw.Indent++;
            foreach (var gp in genericAll.Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries))
            {
                tw.WriteLine($"where {gp} : notnull");
            }
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return source.Bind(({callParameters}) => collectionSelector({callParameters}).Map(c => resultSelector({callParameters}, c))); ");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}

