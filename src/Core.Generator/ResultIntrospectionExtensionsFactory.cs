using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultIntrospectionExtensionsFactory(string @namespace,
                                                           ushort maxOfParameters) {
    public SourceText Generate() {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("using System;\nusing System.Linq;\n");
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("public static bool HasException<TException>(this Result result)");
        tw.Indent++;
        tw.WriteLine("where TException : Exception");
        tw.Indent--;
        tw.WriteLine("{");
        tw.Indent++;
        tw.WriteLine("return !result.Ok(out Exception? err) && err is TException;");
        tw.Indent--;
        tw.WriteLine("}");
        tw.WriteLine();
        tw.WriteLine("public static bool HasError<TError>(this Result result) => result.Reasons.OfType<TError>().Any() || (!result.Ok(out Exception? err) && err is TError);");
        for (ushort arity = 1; arity <= maxOfParameters; arity++) {
            var genericIn = string.Join(", ", Enumerable.Range(1, arity)
                                                        .Select(i => $"TValue{i}"));
            
            var constraints = string.Join(" ", Enumerable.Range(1, arity)
                                                         .Select(i => $"where TValue{i} : notnull"));
            var outType = arity == 1
                              ? "TValue1"
                              : $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"))})";
            tw.WriteLine(
                $"public static bool HasException<TException, {genericIn}>(this Result<{genericIn}> result)");
            tw.Indent++;
            tw.WriteLine($"where TException: Exception {constraints}");
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("return !result.Ok(out Exception? err) && err is TException;");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
            tw.WriteLine(
                $"public static bool HasError<TError, {genericIn}>(this Result<{genericIn}> result)");
            tw.Indent++;
            foreach (var i in Enumerable.Range(1, arity)) {
                tw.WriteLine($"where TValue{i} : notnull");
            }
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("return result.Reasons.OfType<TError>().Any() || (!result.Ok(out Exception? err) && err is TError);");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
            tw.WriteLine($"public static {outType}? ToNullable<{genericIn}>(this Result<{genericIn}> result)");
            tw.Indent++;
            foreach (var i in Enumerable.Range(1, arity)) {
                tw.WriteLine($"where TValue{i} : notnull");
            }
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            if (arity == 1) {
                tw.WriteLine($"return result.Ok(out TValue1? value) ? value : default;");
            }
            else {
                tw.WriteLine("if (!result.IsSuccess) return default;");
                tw.WriteLine($"return result.Ok(out {outType} value) ? value : default;");
            }
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
