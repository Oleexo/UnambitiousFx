using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultSelectExtensionsFactory(string @namespace, ushort maxOfParameters)
{
    public SourceText GenerateTask() => GenerateAsync("Task", "Tasks",
        (failureExpr, genericOut) => $"Task.FromResult<Result<{genericOut}>>({failureExpr})");
    public SourceText GenerateValueTask() => GenerateAsync("ValueTask", "ValueTasks",
        (failureExpr, genericOut) => $"new ValueTask<Result<{genericOut}>>({failureExpr})");

    private SourceText GenerateAsync(string taskKeyword, string subNamespace, Func<string,string,string> newFromResult)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericIn = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var callParams = string.Join(", ", Enumerable.Range(1, i).Select(x => $"value{x}"));
            tw.WriteLine($"public static {taskKeyword}<Result<TOut>> Select<{genericIn}, TOut>(this Result<{genericIn}> source, Func<{genericIn}, TOut> selector)");
            tw.Indent++;
            foreach (var gp in (genericIn + ", TOut").Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)) tw.WriteLine($"where {gp} : notnull");
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return source.Match<{taskKeyword}<Result<TOut>>>(");
            tw.Indent++;
            tw.WriteLine($"({callParams}) =>{taskKeyword}.FromResult(Result.Success(selector({callParams}))),");
            tw.WriteLine($"e => {newFromResult("Result.Failure<TOut>(e)", "TOut")}");
            tw.Indent--;
            tw.WriteLine(");");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();

            tw.WriteLine($"public static {taskKeyword}<Result<TOut>> Select<{genericIn}, TOut>(this {taskKeyword}<Result<{genericIn}>> awaitableSource, Func<{genericIn}, TOut> selector)");
            tw.Indent++;
            foreach (var gp in (genericIn + ", TOut").Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)) tw.WriteLine($"where {gp} : notnull");
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return awaitableSource.MatchAsync<Result<TOut>, {genericIn}>(");
            tw.Indent++;
            tw.WriteLine($"({callParams}) => {taskKeyword}.FromResult(Result.Success(selector({callParams}))),");
            tw.WriteLine($"e => {newFromResult("Result.Failure<TOut>(e)", "TOut")}");
            tw.Indent--;
            tw.WriteLine(");");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort i in Enumerable.Range(1, maxOfParameters))
        {
            var genericIn = string.Join(", ", Enumerable.Range(1, i).Select(x => $"TValue{x}"));
            var callParams = string.Join(", ", Enumerable.Range(1, i).Select(x => $"value{x}"));
            tw.WriteLine($"public static Result<TOut> Select<{genericIn}, TOut>(this Result<{genericIn}> source, Func<{genericIn}, TOut> selector)");
            tw.Indent++;
            foreach (var gp in (genericIn + ", TOut").Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)) tw.WriteLine($"where {gp} : notnull");
            tw.Indent--;
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return source.Bind(({callParams}) => Result.Success(selector({callParams}))); ");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}

