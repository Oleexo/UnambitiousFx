using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultTryGetExtensionsFactory(string @namespace, ushort maxOfParameters)
{
    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        for (ushort arity = 1; arity <= maxOfParameters; arity++)
        {
            var genericIn = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"));
            var constraints = string.Join(" ", Enumerable.Range(1, arity).Select(i => $"where TValue{i} : notnull"));
            var outType = arity == 1 ? "TValue1?" : $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"))})";
            tw.WriteLine($"public static bool TryGet<{genericIn}>(this Result<{genericIn}> result, out {outType} value) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("return result.Ok(out value);");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
