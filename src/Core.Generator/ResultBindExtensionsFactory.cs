using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultBindExtensionsFactory(string @namespace,
                                                  ushort maxOfParameters) {
    public SourceText GenerateTask() {
        return GenerateAsync("Task", "Tasks",
                        (input,
                         genericParameters) => $"Task.FromResult<Result<{genericParameters}>>({input})");
    }

    public SourceText GenerateValueTask() {
        return GenerateAsync("ValueTask", "ValueTasks",
                        (input,
                         genericParameters) => $"new ValueTask<Result<{genericParameters}>>({input})");
    }

    private SourceText GenerateAsync(string                       taskKeyWork,
                                string                       subNamespace,
                                Func<string, string, string> newFromResultFunc) {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(1, maxOfParameters)) {
            foreach (ushort j in Enumerable.Range(1, maxOfParameters)) {
                var genericInputParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var genericOutputParameters = string.Join(", ", Enumerable.Range(1, j)
                                                                          .Select(x => $"TOut{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));
                tw.WriteLine(
                    $"public static {taskKeyWork}<Result<{genericOutputParameters}>> BindAsync<{genericInputParameters}, {genericOutputParameters}>(this Result<{genericInputParameters}> result, Func<{genericInputParameters}, {taskKeyWork}<Result<{genericOutputParameters}>>> bind)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Concat(genericOutputParameters.Split(", ".ToCharArray()))
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;

                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine(
                    $"return result.Match<{taskKeyWork}<Result<{genericOutputParameters}>>>(async ({callParameters}) => await bind({callParameters}), e => {newFromResultFunc($"Result.Failure<{genericOutputParameters}>(e)", genericOutputParameters)});");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
                tw.WriteLine(
                    $"public static async {taskKeyWork}<Result<{genericOutputParameters}>> BindAsync<{genericInputParameters}, {genericOutputParameters}>(this {taskKeyWork}<Result<{genericInputParameters}>> awaitableResult, Func<{genericInputParameters}, {taskKeyWork}<Result<{genericOutputParameters}>>> bind)");
                tw.Indent++;
                foreach (var genericInputParameter in genericInputParameters.Split(", ".ToCharArray())
                                                                            .Concat(genericOutputParameters.Split(", ".ToCharArray()))
                                                                            .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;

                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine("var result = await awaitableResult;");
                tw.WriteLine(
                    $"return await result.Match<{taskKeyWork}<Result<{genericOutputParameters}>>>(async ({callParameters}) => await bind({callParameters}), e => {newFromResultFunc($"Result.Failure<{genericOutputParameters}>(e)", genericOutputParameters)});");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate() {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);

        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");

        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;

        foreach (ushort i in Enumerable.Range(0, maxOfParameters + 1)) {
            foreach (ushort j in Enumerable.Range(0, maxOfParameters + 1)) {
                var genericInputParameters = i == 0 ? string.Empty : string.Join(", ", Enumerable.Range(1, i)
                                                                         .Select(x => $"TValue{x}"));
                var genericOutputParameters = j == 0 ? string.Empty : string.Join(", ", Enumerable.Range(1, j)
                                                                          .Select(x => $"TOut{x}"));
                var callParameters = string.Join(", ", Enumerable.Range(1, i)
                                                                 .Select(x => $"value{x}"));
                var outputResult = j == 0
                                   ? "Result"
                                   : $"Result<{genericOutputParameters}>";
                var inputResult = i == 0
                                  ? "Result"
                                  : $"Result<{genericInputParameters}>";
                var genericParameters = string.Join(", ", new[] { genericInputParameters, genericOutputParameters }.Where(x => !string.IsNullOrEmpty(x)))
                                           .Trim().TrimEnd(',');
                var extensionMethodSignature = i == 0 && j == 0
                                          ? "Bind"
                                          : $"Bind<{genericParameters}>";
                var lambdaMethodSignature = i == 0
                                            ? $"Func<{outputResult}>"
                                            : $"Func<{genericInputParameters}, {outputResult}>";
                var resultFailure = j == 0
                                     ? "Result.Failure"
                                     : $"Result.Failure<{genericOutputParameters}>";
                tw.WriteLine($"public static {outputResult} {extensionMethodSignature}(this {inputResult} result, {lambdaMethodSignature} bind)");
                tw.Indent++;
                foreach (var genericInputParameter in genericParameters.Split(", ".ToCharArray())
                                                                       .Where(x => !string.IsNullOrWhiteSpace(x))) {
                    tw.WriteLine($"where {genericInputParameter} : notnull");
                }

                tw.Indent--;

                tw.WriteLine("{");
                tw.Indent++;
                tw.WriteLine(
                    $"return result.Match<{outputResult}>(({callParameters}) => bind({callParameters}), e => {resultFailure}(e));");
                tw.Indent--;
                tw.WriteLine("}");
                tw.WriteLine();
            }
        }

        tw.Indent--;
        tw.WriteLine("}");

        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
