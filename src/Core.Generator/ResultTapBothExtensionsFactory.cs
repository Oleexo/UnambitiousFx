using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultTapBothExtensionsFactory(string @namespace, ushort max)
{
    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine("public static partial class ResultExtensions {");
        tw.Indent++;
        // Non-generic
        tw.WriteLine("public static Result TapBoth(this Result result, System.Action onSuccess, System.Action<System.Exception> onFailure){ result.Match(onSuccess,onFailure); return result; }");
        tw.WriteLine("public static Result TapEither(this Result result, System.Action onSuccess, System.Action<System.Exception> onFailure) => result.TapBoth(onSuccess,onFailure);");
        tw.WriteLine();
        foreach(ushort i in Enumerable.Range(1,max)){
            var gen = string.Join(", ", Enumerable.Range(1,i).Select(x=>$"TValue{x}"));
            var actionParams = string.Join(", ", Enumerable.Range(1,i).Select(x=>$"TValue{x}"));
            if(i==1){
                tw.WriteLine("public static Result<TValue1> TapBoth<TValue1>(this Result<TValue1> result, System.Action<TValue1> onSuccess, System.Action<System.Exception> onFailure) where TValue1 : notnull { result.Match(onSuccess,onFailure); return result; }");
                tw.WriteLine("public static Result<TValue1> TapEither<TValue1>(this Result<TValue1> result, System.Action<TValue1> onSuccess, System.Action<System.Exception> onFailure) where TValue1 : notnull => result.TapBoth(onSuccess,onFailure);");
            } else {
                tw.WriteLine($"public static Result<{gen}> TapBoth<{gen}>(this Result<{gen}> result, System.Action<{actionParams}> onSuccess, System.Action<System.Exception> onFailure)");
                tw.Indent++; foreach(var gp in gen.Split(',').Select(s=>s.Trim())) tw.WriteLine($"where {gp} : notnull"); tw.Indent--;
                tw.WriteLine("{ result.Match(onSuccess,onFailure); return result; }");
                tw.WriteLine($"public static Result<{gen}> TapEither<{gen}>(this Result<{gen}> result, System.Action<{actionParams}> onSuccess, System.Action<System.Exception> onFailure)");
                tw.Indent++; foreach(var gp in gen.Split(',').Select(s=>s.Trim())) tw.WriteLine($"where {gp} : notnull"); tw.Indent--;
                tw.WriteLine("=> result.TapBoth(onSuccess,onFailure);");
            }
            tw.WriteLine();
        }
        tw.Indent--; tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}
