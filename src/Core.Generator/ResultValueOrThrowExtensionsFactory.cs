using System.CodeDom.Compiler;
using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace UnambitiousFx.Core.Generator;

internal sealed class ResultValueOrThrowExtensionsFactory(string @namespace, ushort maxOfParameters)
{
    public SourceText GenerateTask() => GenerateAsync("Task", "Tasks");
    public SourceText GenerateValueTask() => GenerateAsync("ValueTask", "ValueTasks");

    private SourceText GenerateAsync(string taskKeyword, string subNamespace)
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace}.{subNamespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort arity in Enumerable.Range(1, maxOfParameters))
        {
            var genericIn = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"));
            var callParams = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"value{i}"));
            var constraints = string.Join(" ", Enumerable.Range(1, arity).Select(i => $"where TValue{i} : notnull"));
            var outType = arity == 1 ? "TValue1" : $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"))})";
            var successExpr = arity == 1 ? "value1" : $"({callParams})";
            // No-factory variant
            tw.WriteLine($"public static async {taskKeyword}<{outType}> ValueOrThrow<{genericIn}>(this {taskKeyword}<Result<{genericIn}>> awaitable) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("var result = await awaitable.ConfigureAwait(false);");
            tw.WriteLine($"return result.Match<{outType}>(({callParams}) => {successExpr}, e => throw e);");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
            // Factory variant
            tw.WriteLine($"public static async {taskKeyword}<{outType}> ValueOrThrow<{genericIn}>(this {taskKeyword}<Result<{genericIn}>> awaitable, Func<Exception, Exception> exceptionFactory) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("if (exceptionFactory is null) throw new System.ArgumentNullException(\"exceptionFactory\");");
            tw.WriteLine("var result = await awaitable.ConfigureAwait(false);");
            tw.WriteLine($"return result.Match<{outType}>(({callParams}) => {successExpr}, e => throw exceptionFactory(e));");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }

    public SourceText Generate()
    {
        using var sw = new StringWriter();
        using var tw = new IndentedTextWriter(sw);
        tw.WriteLine("// <auto-generated />");
        tw.WriteLine("#nullable enable");
        tw.WriteLine($"namespace {@namespace};");
        tw.WriteLine();
        tw.WriteLine("public static partial class ResultExtensions");
        tw.WriteLine("{");
        tw.Indent++;
        foreach (ushort arity in Enumerable.Range(1, maxOfParameters))
        {
            var genericIn = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"));
            var callParams = string.Join(", ", Enumerable.Range(1, arity).Select(i => $"value{i}"));
            var constraints = string.Join(" ", Enumerable.Range(1, arity).Select(i => $"where TValue{i} : notnull"));
            var outType = arity == 1 ? "TValue1" : $"({string.Join(", ", Enumerable.Range(1, arity).Select(i => $"TValue{i}"))})";
            var successExpr = arity == 1 ? "value1" : $"({callParams})";
            // No-factory variant
            tw.WriteLine($"public static {outType} ValueOrThrow<{genericIn}>(this Result<{genericIn}> result) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine($"return result.Match<{outType}>(({callParams}) => {successExpr}, e => throw e);");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
            // Factory variant
            tw.WriteLine($"public static {outType} ValueOrThrow<{genericIn}>(this Result<{genericIn}> result, Func<Exception, Exception> exceptionFactory) {constraints}");
            tw.WriteLine("{");
            tw.Indent++;
            tw.WriteLine("if (exceptionFactory is null) throw new System.ArgumentNullException(\"exceptionFactory\");");
            tw.WriteLine($"return result.Match<{outType}>(({callParams}) => {successExpr}, e => throw exceptionFactory(e));");
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }
        tw.Indent--;
        tw.WriteLine("}");
        return SourceText.From(sw.ToString(), Encoding.UTF8);
    }
}

