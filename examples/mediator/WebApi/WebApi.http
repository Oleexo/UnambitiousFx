@WebApiAot_HostAddress = http://localhost:5175

GET {{WebApiAot_HostAddress}}/todos/
Accept: application/json

> {%
    client.test("Response should be empty array", function () {
        client.assert(response.status === 200, "Response status is OK");
        client.assert(Array.isArray(response.body), "Response body is array");
        client.assert(response.body.length === 0, "Array is empty");
    });
%}

###

POST {{WebApiAot_HostAddress}}/todos/
Accept: application/json
Content-Type: application/json

{
  "name": "my todo task 1"
}

> {%
    client.test("Response status is Created", function () {
        client.assert(response.status === 201, "Response status is 201 Created");
    });

    client.test("Response has Location header with valid URL", function () {
        client.assert(response.headers.valueOf("Location"), "Location header exists");
        const locationUrl = response.headers.valueOf("Location");
        const guidPattern = /^\/todo\/([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$/i;
        client.assert(guidPattern.test(locationUrl), "Location header contains valid URL with GUID");

        const match = locationUrl.match(guidPattern);
        client.global.set("todoId", match[1]);
    });
%}

###

GET {{WebApiAot_HostAddress}}/todos/{{todoId}}
Accept: application/json

> {%
    client.test("Get todo response", function () {
        client.assert(response.status === 200, "Response status is OK");
        client.assert(response.body.id === client.global.get("todoId"), "Todo ID matches");
        client.assert(response.body.name === "my todo task 1", "Todo name matches");
    });
%}

###

PUT {{WebApiAot_HostAddress}}/todos/{{todoId}}
Accept: application/json
Content-Type: application/json

{
  "name": "updated todo task 1"
}

> {%
    client.test("Update todo response", function () {
        client.assert(response.status === 200, "Response status is OK");
    });
%}

###

GET {{WebApiAot_HostAddress}}/todos/
Accept: application/json

> {%
    client.test("List todos response", function () {
        client.assert(response.status === 200, "Response status is OK");
        client.assert(Array.isArray(response.body), "Response body is array");
        client.assert(response.body.length === 1, "Array contains one item");
        client.assert(response.body[0].id === client.global.get("todoId"), "Todo ID matches");
        client.assert(response.body[0].name === "updated todo task 1", "Todo name matches");
    });
%}

###





